{
  "swagger": "2.0",
  "basePath": "/api/v3/onepanel",
  "info": {
    "version": "19.02.2",
    "title": "Onepanel",
    "x-bash-codegen-description": "This is the RESTful API definition of **Onepanel** component of Onedata data\nmanagement system [http://onedata.org].\n\nThis API allows control and configuration of local Onedata deployment,\nin particular full control over the **Onezone** and **Oneprovider** services\nand their distribution and monitoring on the local resources.\n\nEach of these components is composed of the following services:\n\n**Worker services** - these are available under `/zone/workers` and\n                      `/provider/workers` paths,\n\n**Databases services** - each Onedata component stores it's metadata in a\n                         Couchbase backend, which can be distributed on any\n                         number of nodes, these are available under\n                         `/zone/databases` and `/provider/databases` paths,\n\n**Cluster manager services** - this is a service which controls other\n                               deployed processes in one site, these are\n                               availables under these are available under\n                               `/zone/managers` and `/provider/managers`\n                               paths.\n\n**Onezone** and **Oneprovider** components are composed of 3 types of\nservices: **managers**, **databases** and **workers**.\n\nUsing this API each of these components can be deployed, configured,\nstarted and stopped on a specified host in the local site, in the context of\neither **Onezone** or **Oneprovider** service.\n",
    "description": "# Overview\n\nThis is the RESTful API definition of **Onepanel** component of Onedata data\nmanagement system [onedata.org](http://onedata.org).\n\n> This API is defined using [Swagger](http://swagger.io/), the JSON\nspecification can be used to automatically generate client libraries -\n  [swagger.json](../../../swagger/onepanel/swagger.json).\n\nThis API allows control and configuration of local Onedata deployment, in\nparticular full control over the **Onezone** and **Oneprovider** services and\ntheir distribution and monitoring on the local resources.\n\nThe API is group into 3 categories of operations:\n  * **Onepanel** - for common operations\n  * **Oneprovider** - for Oneprovider specific administrative operations\n  * **Onezone** - for Onezone specific administrative operations\n\nEach of these components is composed of the following services:\n  * **Worker services** - these are available under `/zone/workers` and\n    `/provider/workers` paths,\n  * **Databases services** - each Onedata component stores it's metadata in a\n    Couchbase backend, which can be distributed on any number of nodes, these\n    are available under `/zone/databases` and `/provider/databases` paths,\n  * **Cluster manager services** - this is a service which controls other\n    deployed processes in one site, these are availables under these are\n    available under `/zone/managers` and `/provider/managers` paths.\n\n**Onezone** and **Oneprovider** components are composed of 3 types of\nservices: **managers**, **databases** and **workers**.\n\nUsing this API each of these components can be deployed, configured,\nstarted and stopped on a specified host in the local site, in the context\nof either **Onezone** or **Oneprovider** service.\n\nAll paths listed in this documentation are relative to the base Onepanel\nREST API which is `/api/v3/onepanel`, so complete URL for a request to\nOnepanel service is:\n\n```\nhttp://HOSTNAME:PORT/api/v3/onepanel/...\n```\n\n## Authentication\n\n### Token authentication\n\nThe recommended, safest way of authenticating requests to Onepanel API is using\nthe **Onedata access tokens**. The token should be present in `X-Auth-Token` or\n`Authorization: Bearer` header.\nSee [Onezone documentation](/#/home/api/latest/onezone?anchor=section/Overview/Authentication-and-authorization)\nfor detailed explanation of the token concepts.\n\nCurl examples:\n```bash\ncurl -H \"X-Auth-Token: $TOKEN\" [...]\ncurl -H \"Authorization: Bearer $TOKEN\" [...]\ncurl -H \"Macaroon: $TOKEN\" [...]   # DEPRECATED\n```\n\n\n### Passphrase authentication\n\nThe token authentication dependes on the Onezone service.\nIn special cases - during Onezone deployment or its outage -\nit is necessary to use the local **emergency passphrase**.\n\nThe passphrase should be provided in a Basic authentication header\nwith username `onepanel`. For curl users this means\n```bash\ncurl -u onepanel:TheEmergencyPassphrase\n```\n\nThe passphrase can also be sent without any username, as the whole\ncontent of base64-encoded string in Basic authorization header, e.g.\n```bash\ncurl -H \"Authorization: Basic $(echo -n TheEmergencyPassphrase | base64)\"\n```\n\nThe passphrase is set during deployment. It can be changed in the Onepanel GUI\nor with an API request:\n```bash\ncurl -X PUT 'https://$HOST:9443/api/v3/onepanel/emergency_passphrase' \\\n-u onepanel:TheEmergencyPassphrase -H 'Content-Type: application/json' \\\n-d '{\"currentPassphrase\": \"TheEmergencyPassphrase\", \"newPassphrase\": \"TheNewPassphrase\"}'\n```\n\n## API structure\n\nThe Onepanel API is structured to reflect that it can either be used to\ncontrol **Onezone** or **Oneprovider** deployment, each Onedata component\ndeployment has a separate Onepanel instance. In order to make the API calls\nexplicit, **Onezone** or **Oneprovider** specific requests have different\npaths, i.e.:\n  * Onezone specific operations start with `/api/v3/onepanel/zone/`\n  * Oneprovider specific operations start with `/api/v3/onepanel/provider/`\n  * Common operations paths include `/api/v3/onepanel/users`,\n    `/api/v3/onepanel/hosts` and `/api/v3/onepanel/tasks`\n\nThe overall configuration of each component can be controlled by updating\n`/api/v3/onepanel/zone/configuration` and\n`/api/v3/onepanel/provider/configuration` resources.\n\n## Examples\n\nBelow are some example requests to Onepanel using cURL:\n\n**Add storage resource to provider**\n```bash\ncurl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\\n-d '{\"NFS\": {\"type\": \"posix\", \"mountPoint\": \"/mnt/vfs\"}}' \\\nhttps://172.17.0.4:9443/api/v3/onepanel/provider/storages\n```\n\n**Add a new Onezone worker**\n```bash\ncurl -X POST -u onepanel:Passphrase1 -k -vvv -H \"content-type: application/json\" \\\n-d '{\"hosts\": [\"node1.p1.1.dev\"]}' \\\nhttps://172.17.0.4:9443/api/v3/onepanel/zone/workers\n```\n",
    "contact": {
      "name": "Onedata support",
      "url": "https://onedata.org/support",
      "email": "info@onedata.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://onedata.org/assets/images/api/onepanel-logo.svg",
      "backgroundColor": "#FFFFFF"
    }
  },
  "paths": {
    "/configuration": {
      "get": {
        "operationId": "get_configuration",
        "summary": "Get public configuration",
        "description": "Returns public configuration details.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "configuration",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Configuration details.",
            "schema": {
              "$ref": "#/definitions/Configuration"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/test_image": {
      "get": {
        "operationId": "test_image",
        "summary": "Get test image",
        "description": "This endpoint returns a dummy image in `.png` format. It is used internally by web applications across Onedata to check connectivity with certain services. This endpoint does not require authentication.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "test_image",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "image/png"
        ],
        "responses": {
          "200": {
            "description": "Test image."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/cluster": {
      "get": {
        "operationId": "get_current_cluster",
        "summary": "Get details of this cluster",
        "description": "Returns details of this cluster.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_clusters",
        "x-onedata-resource": "current_cluster",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Details of the cluster.",
            "schema": {
              "$ref": "#/definitions/ClusterDetails"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getCurrentCluster --host https://$HOST:9443"
          }
        ]
      }
    },
    "/cluster/invite_user_token": {
      "post": {
        "operationId": "create_user_invite_token",
        "summary": "Generate cluster invitation token for a user",
        "description": "Returns a token which can be used to add a Onezone user as a member of this cluster.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_clusters",
        "x-onedata-resource": "invite_user_token",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The generated token.",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE createUserInviteToken --host https://$HOST:9443"
          }
        ]
      }
    },
    "/cluster/members_summary": {
      "get": {
        "operationId": "get_cluster_members_summary",
        "summary": "Get summary of members in this cluster",
        "description": "Returns aggregated counts of users and groups belonging to this cluster.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_clusters",
        "x-onedata-resource": "current_cluster_members_summary",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Members summary.",
            "schema": {
              "$ref": "#/definitions/ClusterMembersSummary"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getClusterMembersSummary --host https://$HOST:9443"
          }
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "get_current_user",
        "summary": "Get Onepanel user details of currently logged in user.",
        "description": "Returns the configuration information of the Onepanel user performing the query.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_users",
        "x-onedata-resource": "current_user",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details.",
            "schema": {
              "$ref": "#/definitions/CurrentUser"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Request client is not a Onezone member."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli getCurrentUser --host https://$HOST:9443 -H \"x-auth-token: $TOKEN\"\n"
          }
        ]
      }
    },
    "/user/clusters": {
      "get": {
        "operationId": "get_clusters",
        "summary": "List user's clusters",
        "description": "Lists clusters to which current user belongs.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_clusters",
        "x-onedata-resource": "clusters",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of cluster ids.",
            "schema": {
              "$ref": "#/definitions/Ids"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Request client is not a Onezone member."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli getClusters --host https://$HOST:9443 -H \"x-auth-token: $TOKEN\"\n"
          }
        ]
      }
    },
    "/user/clusters/{id}": {
      "get": {
        "operationId": "get_cluster",
        "summary": "Get details of a user's cluster",
        "description": "Returns details of the specified cluster.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_clusters",
        "x-onedata-resource": "cluster",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Information about the cluster",
            "schema": {
              "$ref": "#/definitions/ClusterDetails"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Request client is not member of cluster with given Id."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Cluster Id which details should be returned.",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli getCluster --host https://$HOST:9443 -H \"x-auth-token: $TOKEN\"\n"
          }
        ]
      }
    },
    "/providers/{id}": {
      "get": {
        "operationId": "get_remote_provider",
        "summary": "Get details of a remote Oneprovider.",
        "description": "Returns the details of given provider. Only users belonging to that Oneprovider's cluster can fetch its details.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_clusters",
        "x-onedata-resource": "remote_provider",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Oneprovider details.",
            "schema": {
              "$ref": "#/definitions/RemoteProviderDetails"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Request client is not member of given Oneprovider's cluster."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of requested Oneprovider.",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli getRemoteProvider id=VAiDGZbs3k0FD8jPhyU1 --host https://$HOST:9443 -H \"x-auth-token: $TOKEN\"\n"
          }
        ]
      }
    },
    "/cookie": {
      "get": {
        "operationId": "get_cluster_cookie",
        "summary": "Get cluster cookie",
        "description": "Returns cookie of a cluster this host belongs to. The cookie is a character sequence that is common for all the cluster nodes. The cookies are used for authentication between distributed Erlang Onedata processes.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "cookie",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The cookie of a cluster this host belongs to.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getClusterCookie --host https://$HOST:9443"
          }
        ]
      }
    },
    "/dns_check": {
      "get": {
        "operationId": "check_dns",
        "summary": "Check correctness of DNS entries for the cluster's domain.",
        "description": "Returns results of the last DNS check, verifying validity of DNS configuration for cluster's domain. Unless 'forceCheck' flag is set, the results may be cached.\nIf the cluster is configured with an IP instead of a domain no results are returned.\nSettings used for the check, ie. DNS servers used can be modified using the dns_check/configuration endpoint.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "dns_check",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The DNS check results.",
            "schema": {
              "$ref": "#/definitions/DnsCheck"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster not yet deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "forceCheck",
            "in": "query",
            "description": "If true the DNS check cache is overridden and check is performed during handling of the request.",
            "type": "boolean",
            "default": false,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE checkDns --host https://example.com:9443"
          }
        ]
      }
    },
    "/dns_check/configuration": {
      "get": {
        "operationId": "get_dns_check_configuration",
        "summary": "Return settings used when performing the DNS check.",
        "description": "Returns servers queried to check DNS configuration correctness.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "dns_check_configuration",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The DNS check results.",
            "schema": {
              "$ref": "#/definitions/DnsCheckConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster not yet deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getDnsCheckConfiguration --host https://example.com:9443"
          }
        ]
      },
      "patch": {
        "operationId": "modify_dns_check_configuration",
        "summary": "Configure dns check",
        "description": "Informs what DNS servers to use for checking external DNS records validity.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "dns_check_configuration",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "responses": {
          "204": {
            "description": "Changes successfully saved."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "dnsCheckConfiguration",
            "in": "body",
            "description": "The configuration changes.",
            "schema": {
              "$ref": "#/definitions/DnsCheckConfiguration"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "echo '{\"dnsServers\": [\"8.8.8.8\", \"8.8.4.4\"]}' | onepanel-rest-cli -u onepanel:$PASSPHRASE modifyDnsCheckConfiguration --host https://example.com:9443\n"
          }
        ]
      }
    },
    "/join_cluster": {
      "post": {
        "operationId": "join_cluster",
        "summary": "Join existing cluster",
        "description": "Adds this host to adminstrative cluster.\nThe host handling this request has to be newly started or removed from previous cluster. It cannot contain any configured user accounts or other configuration data. Therefore this request does not need authorization.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "cluster",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The node successfully joined the cluster."
          },
          "403": {
            "description": "Forbidden request."
          },
          "409": {
            "description": "Operation forbidden. The node is already a part of a cluster."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "JoinClusterRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/JoinClusterRequest"
            },
            "required": true
          }
        ]
      }
    },
    "/node": {
      "get": {
        "operationId": "get_node",
        "summary": "Get information about current onepanel node.",
        "description": "Returns information about current onepanel node.\nThis request can be executed by unauthorized users only if there are no admin users in the system.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "node",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Details of this onepanel node.",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getHostname --host https://$HOST:9443"
          }
        ]
      }
    },
    "/hosts": {
      "get": {
        "operationId": "get_cluster_hosts",
        "summary": "Get cluster hosts",
        "description": "Returns the list of administrative cluster hosts.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "hosts",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The list of administrative cluster hosts.",
            "schema": {
              "type": "array",
              "description": "List of cluster hosts.",
              "items": {
                "type": "string"
              },
              "example": [
                "host1.example.org",
                "host2.example.org",
                "host3.example.org"
              ]
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getClusterHosts --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_cluster_host",
        "summary": "Adds given host to the cluster",
        "description": "Adds given host to the current cluster. The host can be specified by any address by which it is reachable. Upon success returns proper hostname used to address the new host in cluster management.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "hosts",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Host added.",
            "schema": {
              "$ref": "#/definitions/Host"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "HostAddRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/HostAddRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE addClusterHost address==$HOSTNAME --host https://$HOST:9443"
          }
        ]
      }
    },
    "/hosts/{host}": {
      "delete": {
        "operationId": "remove_cluster_host",
        "summary": "Remove host from cluster",
        "description": "Removes a node from the administrative cluster. This operation removes all user and configuration data from the host.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "host",
        "tags": [
          "Onepanel"
        ],
        "responses": {
          "204": {
            "description": "Node has been successfully removed from the cluster."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Host not found."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "in": "path",
            "type": "string",
            "description": "Hostname of a node to be removed from the cluster.",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE removeClusterHost host=$CLUSTER_HOST --host https://$HOST:9443"
          }
        ]
      }
    },
    "/tasks/{id}": {
      "get": {
        "operationId": "get_task_status",
        "summary": "Get background task result",
        "description": "Returns result of an asynchronous operation, e.g. database service configuration.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "task",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The requested task status.",
            "schema": {
              "$ref": "#/definitions/TaskStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "The task does not exist."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The requested task Id.",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getTaskStatus id=$TASK_ID --host https://$HOST:9443"
          }
        ]
      }
    },
    "/progress": {
      "get": {
        "operationId": "get_progress",
        "summary": "Get deployment progress",
        "description": "Returns deployment markers state.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "progress",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The progress markers.",
            "schema": {
              "$ref": "#/definitions/Progress"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "modify_progress",
        "summary": "Modify progress markers",
        "description": "Sets or unsets markers for completed deployment stages.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "progress",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Changes successfully saved."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "ProgressModify",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProgressModify"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE modifyProgress dnsCheck==true --host https://$HOST:9443"
          }
        ]
      }
    },
    "/emergency_passphrase": {
      "get": {
        "operationId": "get_emergency_passphrase_status",
        "summary": "Get emergency passphrase status",
        "description": "Returns information whether emergency passphrase is set.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "emergency_passphrase",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The passphrase status",
            "schema": {
              "$ref": "#/definitions/EmergencyPassphraseStatus"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli getEmergencyPassphraseStatus --host https://$HOST:9443"
          }
        ]
      },
      "put": {
        "operationId": "set_emergency_passphrase",
        "summary": "Set emergency passphrase",
        "description": "Sets passphrase which can be used to access the Onepanel REST API and emergency Onepanel GUI.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "emergency_passphrase",
        "x-onedata-noauth": true,
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Changes successfully saved."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "EmergencyPassphrase",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmergencyPassphraseChangeRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:oldPassphrase setEmergencyPassphrase currentPassphrase==oldPassphrase newPassphrase==someNewPassphrase --host https://$HOST:9443"
          }
        ]
      }
    },
    "/web_cert": {
      "get": {
        "operationId": "get_web_cert",
        "summary": "Get information about SSL certificates configuration and status.",
        "description": "Returns information about SSL certificate status and renewal configuration.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "web_cert",
        "tags": [
          "Onepanel"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Details of the certificate.",
            "schema": {
              "$ref": "#/definitions/WebCert"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster hosts are not configured."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getWebCert --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "modify_web_cert",
        "summary": "Modify SSL certificate configuration",
        "description": "Modifies configuration regarding certificate management. Allows enabling or disabling certificate autorenewal using Let's Encrypt service.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onepanel",
        "x-onedata-resource": "web_cert",
        "tags": [
          "Onepanel"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Certificate configuration has been successfully modified."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "WebCertModifyRequest",
            "in": "body",
            "description": "New values for certificate management configuration.\n",
            "schema": {
              "$ref": "#/definitions/WebCertModifyRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE modifyWebCert letsEncrypt==true --host https://example.com:9443"
          }
        ]
      }
    },
    "/provider": {
      "get": {
        "operationId": "get_provider",
        "summary": "Get provider details",
        "description": "Returns the basic configuration information of the provider.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "provider",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The provider configuration details.",
            "schema": {
              "$ref": "#/definitions/ProviderDetails"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProvider --host https://example.com:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_provider",
        "summary": "Register provider",
        "description": "Registers provider in the zone.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "provider",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Provider has been successfully registered."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "409": {
            "description": "Provider already registered."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "providerRegisterRequest",
            "in": "body",
            "description": "The new provider details.",
            "schema": {
              "$ref": "#/definitions/ProviderRegisterRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat provider_details.json | onepanel-rest-cli -u onepanel:$PASSPHRASE addProvider --host https://example.com:9443"
          }
        ]
      },
      "patch": {
        "operationId": "modify_provider",
        "summary": "Modify provider details",
        "description": "Modifies basic provider details in the zone.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "provider",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Provider details has been successfully modified."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "providerModifyRequest",
            "in": "body",
            "description": "New values for provider configuration parameters which should be changed.\n",
            "schema": {
              "$ref": "#/definitions/ProviderModifyRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat provider_details.json | onepanel-rest-cli -u onepanel:$PASSPHRASE modifyProvider --host https://example.com:9443"
          }
        ]
      },
      "delete": {
        "operationId": "remove_provider",
        "summary": "Unregister provider",
        "description": "Unregisters provider from the zone.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "provider",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Provider has been successfully unregistered."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE removeProvider --host https://example.com:9443"
          }
        ]
      }
    },
    "/provider/nagios": {
      "get": {
        "operationId": "get_provider_nagios_report",
        "summary": "Get provider nagios report",
        "description": "Returns the provider nagios report.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "nagios",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "The provider nagios report."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "The service is stopped and cannot be queried for nagios report."
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderNagiosReport --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/configuration": {
      "get": {
        "operationId": "get_provider_configuration",
        "summary": "Get provider cluster configuration",
        "description": "Returns the provider cluster configuration.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oneprovider",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The provider cluster configuration.",
            "schema": {
              "$ref": "#/definitions/ProviderConfigurationDetails"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster is not fully deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderConfiguration --host https://example.com:9443"
          }
        ]
      },
      "post": {
        "operationId": "configure_provider",
        "summary": "Configure provider deployment",
        "description": "Configures and starts provider services, such as database, cluster manager and cluster worker. Depending on the configuration, sets up provider storage and registers in the zone.\nThis request can be executed unauthorized as long as there are no admin users.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oneprovider",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "responses": {
          "201": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "409": {
            "description": "Cluster already deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "providerConfiguration",
            "in": "body",
            "description": "The provider configuration description.",
            "schema": {
              "$ref": "#/definitions/ProviderConfiguration"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat provider_config.json | onepanel-rest-cli -u onepanel:$PASSPHRASE configureProvider --host https://example.com:9443"
          }
        ]
      }
    },
    "/provider/spaces": {
      "get": {
        "operationId": "get_provider_spaces",
        "summary": "Get provider spaces",
        "description": "Returns the list of spaces supported by the provider.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "spaces",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The provider spaces IDs.",
            "schema": {
              "$ref": "#/definitions/ProviderSpaces"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderSpaces --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "support_space",
        "summary": "Support space",
        "description": "Supports an existing space.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "spaces",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The spaces has been successfully supported.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the supported space resource."
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "spaceSupportRequest",
            "in": "body",
            "description": "Specification of the space support request including support size and token.\n",
            "schema": {
              "$ref": "#/definitions/SpaceSupportRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE supportSpace token==ASDKJASKJDHKAJSHD size:=1073741824 --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/spaces/{id}": {
      "get": {
        "operationId": "get_space_details",
        "summary": "Get space details",
        "description": "Returns details of space specified by space Id in the path.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The space details.",
            "schema": {
              "$ref": "#/definitions/SpaceDetails"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Space does not exist or is not supported by the provider."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space which details should be returned.",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getSpaceDetails id=$SPACE_ID --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "modify_space",
        "summary": "Modify space details",
        "description": "Modifies the space import/update strategies.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The space details has been successfully changed. Returns object with Id of the space.",
            "schema": {
              "$ref": "#/definitions/SpaceId"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "The user does not exist."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space which details should be modified.",
            "required": true
          },
          {
            "name": "spaceModifyRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpaceModifyRequest"
            },
            "required": true
          }
        ]
      },
      "delete": {
        "operationId": "revoke_space_support",
        "summary": "Revoke space support for a space",
        "description": "Allows provider to revoke storage support for a specific space. Users with access to this space will no longer be able to store data on the resources of this provider.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "The space support has been successfully revoked."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Space does not exist or is not supported by the provider."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space to be removed.",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE revokeSpaceSupport id=$SPACE_ID --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/spaces/{id}/auto-cleaning/configuration": {
      "get": {
        "operationId": "get_space_auto_cleaning_configuration",
        "summary": "Get space auto-cleaning configuration",
        "description": "Returns configuration of auto-cleaning mechanism in the space specified by space Id in the path.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space_auto_cleaning_configuration",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The space auto-cleaning configuration.",
            "schema": {
              "$ref": "#/definitions/SpaceAutoCleaningConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Space does not exist or is not supported by the provider."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space of which auto-cleaning configuration should be returned.",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getSpaceAutoCleaningConfiguration id=$SPACE_ID --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "configure_space_auto_cleaning",
        "summary": "Configure space auto-cleaning mechanism",
        "description": "Configures space auto-cleaning mechanism in the space.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space_auto_cleaning_configuration",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Auto-cleaning configuration has been updated"
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space",
            "required": true
          },
          {
            "name": "spaceAutoCleaningConfiguration",
            "in": "body",
            "description": "New configuration of space auto-cleaning mechanism.\n",
            "schema": {
              "$ref": "#/definitions/SpaceAutoCleaningConfiguration"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat new_auto_cleaning_config.json | onepanel-rest-cli -u onepanel:$PASSPHRASE --host https://$HOST:9443 configureSpaceAutoCleaning id=$SPACE_ID -\n"
          }
        ]
      }
    },
    "/provider/spaces/{id}/auto-cleaning/reports": {
      "get": {
        "operationId": "get_provider_space_auto_cleaning_reports",
        "summary": "Get Ids of of the space auto-cleaning reports",
        "description": "Returns the list of Ids of space auto-cleaning reports. The list is sorted descending by start time of an auto-cleaning run (the newest report is first).\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space_auto_cleaning_reports",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The list of Ids of space auto-cleaning reports.",
            "schema": {
              "$ref": "#/definitions/SpaceAutoCleaningReports"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space",
            "required": true
          },
          {
            "name": "offset",
            "in": "query",
            "type": "integer",
            "description": "Allows to skip N first report Ids.",
            "required": false,
            "default": 0
          },
          {
            "name": "limit",
            "in": "query",
            "type": "integer",
            "description": "Allows to limit the number of returned report Ids up to N last reports. By default, all report Ids will be returned.\n",
            "required": false
          },
          {
            "name": "index",
            "in": "query",
            "type": "string",
            "description": "Allows to list the report Ids starting from the specific report.\n",
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE --host https://$HOST:9443 getProviderSpaceAutoCleaningReports id=$SPACE_ID offset=5 limit=10 index=1234148561abcdef\n"
          }
        ]
      }
    },
    "/provider/spaces/{id}/auto-cleaning/reports/{report_id}": {
      "get": {
        "operationId": "get_provider_space_auto_cleaning_report",
        "summary": "Get the report from a space auto-cleaning run",
        "description": "Returns the details of a specific auto-cleaning run.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space_auto_cleaning_report",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The report from a space auto-cleaning run.",
            "schema": {
              "$ref": "#/definitions/SpaceAutoCleaningReport"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space",
            "required": true
          },
          {
            "name": "report_id",
            "in": "path",
            "type": "string",
            "description": "The Id of an auto-cleaning report.",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE --host https://$HOST:9443 getProviderSpaceAutoCleaningReports id=$SPACE_ID report_id=$REPORT_ID\n"
          }
        ]
      }
    },
    "/provider/spaces/{id}/auto-cleaning/start": {
      "post": {
        "operationId": "trigger_auto_cleaning",
        "summary": "Triggers space auto-cleaning",
        "description": "Triggers one run of auto-cleaning mechanism for given space.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space_auto_cleaning_start",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Cleaning of given space has started."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE triggerAutoCleaning --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/spaces/{id}/auto-cleaning/status": {
      "get": {
        "operationId": "get_provider_space_auto_cleaning_status",
        "summary": "Get status of space auto-cleaning mechanism",
        "description": "Returns status of current process of auto-cleaning for the space.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space_auto_cleaning_status",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Information about current auto-cleaning process for the space.",
            "schema": {
              "$ref": "#/definitions/SpaceAutoCleaningStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE --host https://$HOST:9443 getProviderSpaceAutoCleaningStatus id=$SPACE_ID\n"
          }
        ]
      }
    },
    "/provider/spaces/{id}/file-popularity/configuration": {
      "get": {
        "operationId": "get_file_popularity_configuration",
        "summary": "Get file-popularity configuration",
        "description": "Returns configuration of file-popularity mechanism in the space specified by space Id in the path.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "file_popularity_configuration",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The file-popularity configuration.",
            "schema": {
              "$ref": "#/definitions/SpaceFilePopularityConfiguration"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Space does not exist or is not supported by the provider."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space of which file-popularity configuration should be returned.",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getFilePopularityConfiguration id=$SPACE_ID --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "configure_file_popularity",
        "summary": "Configure file-popularity mechanism in the space.",
        "description": "Configures the file-popularity mechanism in the space.\nThe mechanism is responsible for collecting file-popularity usage statistics per space support.\nCreates a view which can be queried to fetch the least popular files.\nThe view is sorted in an increasing order by the popularity function value.\nThe popularity function is defined as\n\n```\nP(lastOpenHour, avgOpenCountPerDay) = w1 * lastOpenHour + w2 * min(avgOpenCountPerDay, MAX_AVG_OPEN_COUNT_PER_DAY)\nwhere:\n* lastOpenHour - parameter which is equal to timestamp (in hours since 01.01.1970) of last open operation on given file\n* w1 - weight of lastOpenHour parameter\n* avgOpenCountPerDay - parameter equal to moving average of number of open operations on given file per day. Value is calculated over last 30 days.\n* w2 - weight of avgOpenCountPerDay parameter\n* MAX_AVG_OPEN_COUNT_PER_DAY - upper boundary for avgOpenCountPerDay parameter\n```\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "file_popularity_configuration",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Configuration process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space.",
            "required": true
          },
          {
            "name": "spaceFilePopularityConfiguration",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SpaceFilePopularityConfiguration"
            },
            "description": "Configuration of the file-popularity mechanism in the space.",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE configureFilePopularity --host https://$HOST:9443 enabled:=true"
          }
        ]
      }
    },
    "/provider/spaces/{id}/sync": {
      "get": {
        "operationId": "get_provider_space_sync_stats",
        "summary": "Get statistics of storage synchronization",
        "description": "Returns requested statistics of storage synchronization for given space on this provider.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "space_sync_stats",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Space synchronization status and statistics.",
            "schema": {
              "$ref": "#/definitions/SpaceSyncStats"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a space for which sync stats should be returned.",
            "required": true
          },
          {
            "name": "period",
            "in": "query",
            "description": "Predefined time period for which the statistics should be fetched",
            "type": "string",
            "enum": [
              "minute",
              "hour",
              "day"
            ],
            "required": false
          },
          {
            "name": "metrics",
            "in": "query",
            "description": "Specify which statistic metrics should be returned - strings delimited with comma",
            "type": "string",
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE --host https://$HOST:9443 getProviderSpaceSyncStats id=$SPACE_ID started_after=\"2017-10-20T21:39:37\"\n"
          }
        ]
      }
    },
    "/provider/storages": {
      "get": {
        "operationId": "get_storages",
        "summary": "Get storages",
        "description": "Returns the list of provider storage resources and their details.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "storages",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The provider storage resources Ids.",
            "schema": {
              "$ref": "#/definitions/ProviderStorages"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getStorages --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_storage",
        "summary": "Add storage",
        "description": "Adds additional storage resources to the provider.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "storages",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The storage resources have been successfully added to the provider deployment.\n"
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "storageCreateRequest",
            "in": "body",
            "description": "The configuration details of storage resources to be added to the provider deployment.\n",
            "schema": {
              "$ref": "#/definitions/StorageCreateRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat storages.json | onepanel-rest-cli -u onepanel:$PASSPHRASE addStorage --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/storages/{id}": {
      "get": {
        "operationId": "get_storage_details",
        "summary": "Get storage details",
        "description": "Returns the details of the selected storage.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "storage",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The details of a selected storage.",
            "schema": {
              "$ref": "#/definitions/StorageDetails"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Storage does not exist."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a storage resource, which details should be returned.\n",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getStorageDetails id=$STORAGE_ID --host https://$HOST:9443\n"
          }
        ]
      },
      "patch": {
        "operationId": "modify_storage",
        "summary": "Modify storage config",
        "description": "Modifies storage configuration.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "storage",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The storage resources have been successfully modified.\nResponse contains current storage params and report of file creation test.\n",
            "schema": {
              "$ref": "#/definitions/StorageDetails"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of the storage resource which details should be modified.\n",
            "required": true
          },
          {
            "name": "storageModifyRequest",
            "in": "body",
            "description": "New values for storage configuration parameters which should be changed. Must contain the current type of the storage.\n",
            "schema": {
              "$ref": "#/definitions/StorageModifyRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli id=$STORAGE_ID timeout==10000 -u onepanel:$PASSPHRASE --host https://$HOST:9443 modifyStorage\n"
          }
        ]
      },
      "delete": {
        "operationId": "remove_storage",
        "summary": "Remove storage",
        "description": "Removes storage from the cluster. Only storage not supporting any spaces can be removed.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "storage",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Storage has been succesfully removed."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Storage does not exist."
          },
          "409": {
            "description": "Storage supports a space and cannot be removed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of the storage to remove.",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE id=$STORAGE_ID removeStorage --host https://op.example.com:9443\n"
          }
        ]
      }
    },
    "/provider/storages/{id}/invalidate_luma": {
      "patch": {
        "operationId": "invalidate_luma_cache",
        "summary": "Invalidate LUMA cache",
        "description": "Invalidates LUMA cache in provider for given storage.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "luma",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "LUMA cache has been successfully invalidated."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "The Id of a storage resource, which details should be modified.\n",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE --host https://$HOST:9443 invalidateLumaCache id=$STORAGE_ID"
          }
        ]
      }
    },
    "/provider/databases": {
      "get": {
        "operationId": "get_provider_databases_status",
        "summary": "Get provider databases status",
        "description": "Returns status of database service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of database service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderDatabasesStatus --host https://example.com:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_provider_databases",
        "summary": "Deploy provider databases",
        "description": "Deploys a database service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceHosts",
            "in": "body",
            "description": "The service hosts configuration where databases should be deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceDatabases"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat service_dbs.json | onepanel-rest-cli -u onepanel:$PASSPHRASE addProviderDatabases --host https://example.com:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_provider_databases",
        "summary": "Start/stop provider databases",
        "description": "Starts or stops database service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Database service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the database service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopProviderDatabases started=false --host https://example.com:9443"
          }
        ]
      }
    },
    "/provider/databases/{host}": {
      "get": {
        "operationId": "get_provider_database_status",
        "summary": "Get provider database status",
        "description": "Returns status of database service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of database service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which database service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderDatabaseStatus host=db1.example.com --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_provider_database",
        "summary": "Start/stop provider database",
        "description": "Starts or stops database service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Database service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which database service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the database service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopProviderDatabase host=db1.example.com --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/managers": {
      "get": {
        "operationId": "get_provider_managers_status",
        "summary": "Get provider cluster managers status",
        "description": "Returns status of cluster manager service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster manager service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderManagersStatus --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_provider_managers",
        "summary": "Add provider cluster managers",
        "description": "Deploys a cluster manager service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "managerHosts",
            "in": "body",
            "description": "The cluster manager service hosts configuration.",
            "schema": {
              "$ref": "#/definitions/ManagerHosts"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat mng_hosts.json | onepanel-rest-cli -u onepanel:$PASSPHRASE -ct json addProviderManagers --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_provider_managers",
        "summary": "Start/stop provider cluster managers",
        "description": "Starts or stops cluster manager service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Cluster manager service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster manager service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopProviderManagers started=false --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/managers/{host}": {
      "get": {
        "operationId": "get_provider_manager_status",
        "summary": "Get provider cluster manager status",
        "description": "Returns status of cluster manager service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster manager service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed on the selected host.\n"
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster manager service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderManagerStatus host=mng.example.com --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_provider_manager",
        "summary": "Start/stop provider cluster manager",
        "description": "Starts or stops cluster manager service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Cluster manager service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed on the selected host.\n"
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster manager service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster manager service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopProviderManager started=false --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/workers": {
      "get": {
        "operationId": "get_provider_workers_status",
        "summary": "Get provider cluster workers status",
        "description": "Returns status of cluster worker service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster worker service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderWorkersStatus --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_provider_workers",
        "summary": "Add provider cluster workers",
        "description": "Deploys cluster worker services on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceHosts",
            "in": "body",
            "description": "The service hosts configuration where workers should be deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceHosts"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat hosts.json | onepanel-rest-cli -u onepanel:$PASSPHRASE addProviderWorkers --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_provider_workers",
        "summary": "Start/stop provider cluster workers",
        "description": "Starts or stops cluster worker service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Cluster worker service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster worker service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopProviderWorkers started=true --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/workers/{host}": {
      "get": {
        "operationId": "get_provider_worker_status",
        "summary": "Get provider cluster worker status",
        "description": "Returns status of cluster worker service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster worker service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed on the selected host.\n"
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster worker service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderWorkerStatus host=work.example.com --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_provider_worker",
        "summary": "Start/stop provider cluster worker",
        "description": "Starts or stops cluster worker service on the selected host in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_op_worker",
        "tags": [
          "Oneprovider"
        ],
        "responses": {
          "204": {
            "description": "Cluster worker service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed on the selected host.\n"
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster worker service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster worker service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopProviderWorker host=work.example.com started=false --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/cluster_ips": {
      "get": {
        "operationId": "get_provider_cluster_ips",
        "summary": "Get provider cluster nodes IPs",
        "description": "Returns IPs of nodes in provider cluster",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "cluster_ips",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The IPs of provider nodes.",
            "schema": {
              "$ref": "#/definitions/ClusterIps"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getProviderClusterIps --host https://example.com:9443"
          }
        ]
      },
      "patch": {
        "operationId": "modify_provider_cluster_ips",
        "summary": "Set external IPs of nodes in application config",
        "description": "Informs cluster nodes about external IPs which can be used to access them by other providers.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "cluster_ips",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "responses": {
          "204": {
            "description": "IPs successfully saved."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "parameters": [
          {
            "name": "clusterIps",
            "in": "body",
            "description": "The provider configuration description.",
            "schema": {
              "$ref": "#/definitions/ModifyClusterIps"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat provider_config.json | onepanel-rest-cli -u onepanel:$PASSPHRASE modifyProviderClusterIps --host https://example.com:9443"
          }
        ]
      }
    },
    "/provider/onezone_info": {
      "get": {
        "operationId": "get_onezone_info",
        "summary": "Get Onezone information",
        "description": "Get information about a Onezone.\nBefore registration this endpoint requires a registration token and returns information about the Onezone issuing the token.\nWhen provider is registered returns information about the Onezone at which the provider is registered.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "onezone_info",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Information about Onezone.",
            "schema": {
              "$ref": "#/definitions/OnezoneInfo"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string",
            "description": "Oneprovider registration token obtained from Onezone. Required if the Oneprovider is not registered.",
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getOnezoneInfo --host https://$HOST:9443"
          }
        ]
      }
    },
    "/provider/debug/transfers_mock": {
      "get": {
        "operationId": "get_transfers_mock",
        "summary": "Get transfers mock status",
        "description": "Returns information whether transfers mocking is enabled.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "transfers_mock",
        "tags": [
          "Oneprovider"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Transfers mock configuration.",
            "schema": {
              "$ref": "#/definitions/TransfersMock"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Oneprovider cluster is not registered."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getTransfersMock --host https://oz.example.com:9443"
          }
        ]
      },
      "patch": {
        "operationId": "modify_transfers_mock",
        "summary": "Modify transfers mock",
        "description": "Toggle transfers mock. When enabled, all transfers finish successfully without actually transferring data. WARNING: this is a debugging feature disrupting normal Oneprovider operation.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_oneprovider",
        "x-onedata-resource": "transfers_mock",
        "tags": [
          "Oneprovider"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Mock has been successfully set"
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Oneprovider is not registered."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "TransfersMock",
            "in": "body",
            "description": "New value for the mock setting.",
            "schema": {
              "$ref": "#/definitions/TransfersMock"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE modifyTransfersMock transfersMock==true --host https://oz.example.org:9443"
          }
        ]
      }
    },
    "/zone/users": {
      "get": {
        "operationId": "get_onezone_users",
        "summary": "List Onezone users",
        "description": "List Ids of Onezone users.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_users",
        "x-onedata-resource": "onezone_users",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of user Ids.",
            "schema": {
              "$ref": "#/definitions/Ids"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getOnezoneUsers --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_onezone_user",
        "summary": "Create Onezone user",
        "description": "Creates a new Onezone user account with Basic (username & password) authentication enabled.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_users",
        "x-onedata-resource": "onezone_users",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The user account has been successfully created."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "userCreateRequest",
            "in": "body",
            "description": "The user configuration details.",
            "schema": {
              "$ref": "#/definitions/OnezoneUserCreateRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE addOnezoneUser username==bob password==secret --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/users/{id}": {
      "get": {
        "operationId": "get_onezone_user",
        "summary": "Get Onezone user details",
        "description": "Returns the configuration information of the Onezone user.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_users",
        "x-onedata-resource": "onezone_user",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Oneozne user details.",
            "schema": {
              "$ref": "#/definitions/OnezoneUser"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "The user does not exist."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user to be described.",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getOnezoneUser id=$USER_ID --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "change_user_password",
        "summary": "Set password for Onezone user",
        "description": "Sets new password for a Onezone user using Basic authentication.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_users",
        "x-onedata-resource": "onezone_user",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The user password has been successfully changed."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "The user does not exist."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user whose password is changed.",
            "type": "string",
            "required": true
          },
          {
            "name": "PasswordChangeRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PasswordChangeRequest"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE changeUserPassword id=$USER_ID newPassword==someNewPassword --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/nagios": {
      "get": {
        "operationId": "get_zone_nagios_report",
        "summary": "Get zone nagios report",
        "description": "Returns the zone nagios report.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "nagios",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "The zone nagios report."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "The service is stopped and cannot be queried for nagios report."
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZoneNagiosReport --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/configuration": {
      "get": {
        "operationId": "get_zone_configuration",
        "summary": "Get zone cluster configuration",
        "description": "Returns the zone cluster configuration.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_onezone",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The zone cluster configuration.",
            "schema": {
              "$ref": "#/definitions/ZoneConfigurationDetails"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "409": {
            "description": "Cluster already deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZoneConfiguration --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "configure_zone",
        "summary": "Configure zone deployment",
        "description": "Configures and starts zone services, such as database, cluster manager and cluster worker.\nThis request can be executed by unauthorized users as long as there are no admin users in the system.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_onezone",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "responses": {
          "201": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request - cluster already deployed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "zoneConfiguration",
            "in": "body",
            "description": "The zone configuration description.",
            "schema": {
              "$ref": "#/definitions/ZoneConfiguration"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat zone_config.json | onepanel-rest-cli -u onepanel:$PASSPHRASE configureZone --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/databases": {
      "get": {
        "operationId": "get_zone_databases_status",
        "summary": "Get zone databases status",
        "description": "Returns status of database service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of database service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZoneDatabasesStatus --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_zone_databases",
        "summary": "Add zone databases",
        "description": "Deploys a database service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceHosts",
            "in": "body",
            "description": "The service hosts configuration where databases should be deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceDatabases"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat hosts.json | onepanel-rest-cli -u onepanel:$PASSPHRASE addZoneDatabases --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_zone_databases",
        "summary": "Start/stop zone databases",
        "description": "Starts or stops database service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Database service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the database service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopZoneDatabases started=false --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/databases/{host}": {
      "get": {
        "operationId": "get_zone_database_status",
        "summary": "Get zone database status",
        "description": "Returns status of database service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of database service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which database service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZoneDatabaseStatus host=db1.example.com --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_zone_databases_host",
        "summary": "Start/stop zone database",
        "description": "Starts or stops database service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_couchbase",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Database service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Database service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which database service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the database service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopZoneDatabasesHost host=db1.example.com started=false --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/managers": {
      "get": {
        "operationId": "get_zone_managers_status",
        "summary": "Get zone cluster managers status",
        "description": "Returns status of cluster manager service on each host where it has been eployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster manager service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZoneManagersStatus --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_zone_managers",
        "summary": "Add zone cluster managers",
        "description": "Deploys a cluster manager service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "managerHosts",
            "in": "body",
            "description": "The hosts specification where cluster managers should be deployed.\n",
            "schema": {
              "$ref": "#/definitions/ManagerHosts"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat hosts.json | onepanel-rest-cli -u onepanel:$PASSPHRASE addZoneManagers --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_zone_managers",
        "summary": "Start/stop zone cluster managers",
        "description": "Starts or stops cluster manager service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Cluster manager service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster manager service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopZoneManagers started=true --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/managers/{host}": {
      "get": {
        "operationId": "get_zone_manager_status",
        "summary": "Get zone cluster manager status",
        "description": "Returns status of cluster manager service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster manager service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed on the selected host.\n"
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster manager service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZoneManagerStatus host=mng.example.com started=true --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_zone_manager",
        "summary": "Start/stop zone cluster manager",
        "description": "Starts or stops cluster manager service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_cluster_manager",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Cluster manager service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster manager service has not been deployed on the selected host.\n"
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster manager service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster manager service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopZoneManager host=mng.example.com started=true --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/workers": {
      "get": {
        "operationId": "get_zone_workers_status",
        "summary": "Get zone cluster workers status",
        "description": "Returns status of cluster worker service on each host where it has been deployed.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster worker service on each host where it has been deployed.\n",
            "schema": {
              "$ref": "#/definitions/ServiceStatus"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZoneWorkersStatus --host https://$HOST:9443"
          }
        ]
      },
      "post": {
        "operationId": "add_zone_workers",
        "summary": "Add zone cluster workers",
        "description": "Deploys a cluster worker service on provided hosts.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment process successfully started.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The path to the task resource, which can be queried to check operation status.\n"
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceHosts",
            "in": "body",
            "description": "The hosts specification where the workers should be deployed.",
            "schema": {
              "$ref": "#/definitions/ServiceHosts"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat hosts.json | onepanel-rest-cli -u onepanel:$PASSPHRASE addZoneWorkers --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_zone_workers",
        "summary": "Start/stop zone cluster workers",
        "description": "Starts or stops cluster worker service on all hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Cluster worker service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster worker service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopZoneWorkers started=false --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/workers/{host}": {
      "get": {
        "operationId": "get_zone_worker_status",
        "summary": "Get zone cluster worker status",
        "description": "Returns status of cluster worker service on the selected host.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The status of cluster worker service on the selected host.",
            "schema": {
              "$ref": "#/definitions/ServiceStatusHost"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed on the selected host."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster worker service status should be returned.\n",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZoneWorkerStatus host=work.example.com --host https://$HOST:9443"
          }
        ]
      },
      "patch": {
        "operationId": "start_stop_zone_worker",
        "summary": "Start/stop zone cluster worker",
        "description": "Starts or stops cluster worker service on the selected hosts in the local deployment.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_service",
        "x-onedata-resource": "service_oz_worker",
        "tags": [
          "Onezone"
        ],
        "responses": {
          "204": {
            "description": "Cluster worker service state changed successfully."
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Cluster worker service has not been deployed on the selected host.\n"
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          }
        },
        "parameters": [
          {
            "name": "host",
            "description": "The name of a host for which cluster worker service status should be changed.\n",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "started",
            "in": "query",
            "description": "Defines the intended state of the cluster worker service. The service will be started or stopped in order to match the requested state.\n",
            "type": "boolean",
            "default": true,
            "required": false
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE startStopZoneWorker host=work.example.com started=false --host https://$HOST:9443"
          }
        ]
      }
    },
    "/zone/cluster_ips": {
      "get": {
        "operationId": "get_zone_cluster_ips",
        "summary": "Get zone cluster nodes IPs",
        "description": "Returns IPs of nodes in zone cluster",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onezone",
        "x-onedata-resource": "cluster_ips",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The IPs of zone nodes.",
            "schema": {
              "$ref": "#/definitions/ClusterIps"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "Services needed to fulfill this request are not running."
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZoneClusterIps --host https://example.com:9443"
          }
        ]
      },
      "patch": {
        "operationId": "modify_zone_cluster_ips",
        "summary": "Set external IPs of nodes in application config",
        "description": "Informs cluster nodes about external IPs which can be used to access them by other zones.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onezone",
        "x-onedata-resource": "cluster_ips",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json",
          "application/x-yaml"
        ],
        "responses": {
          "204": {
            "description": "IPs successfully saved."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "clusterIps",
            "in": "body",
            "description": "The zone configuration description.",
            "schema": {
              "$ref": "#/definitions/ModifyClusterIps"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "cat zone_config.json | onepanel-rest-cli -u onepanel:$PASSPHRASE modifyZoneClusterIps --host https://example.com:9443"
          }
        ]
      }
    },
    "/zone/policies": {
      "get": {
        "operationId": "get_zone_policies",
        "summary": "Get Onezone policies.",
        "description": "Returns restrictions placed on Onezone operations such as registering Oneproviders.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onezone",
        "x-onedata-resource": "policies",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Onezone policies configuration.",
            "schema": {
              "$ref": "#/definitions/ZonePolicies"
            }
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Onezone cluster is not configured."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE getZonePolicies --host https://oz.example.com:9443"
          }
        ]
      },
      "patch": {
        "operationId": "modify_zone_policies",
        "summary": "Modify current Onezone policies",
        "description": "Modifies restrictions placed on Onezone operations such as registering providers.\n",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onezone",
        "x-onedata-resource": "policies",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Policies have been successfully modified"
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/ServiceError"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "404": {
            "description": "Onezone cluster is not configured."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "ZonePolicies",
            "in": "body",
            "description": "New values for Onezone policies.",
            "schema": {
              "$ref": "#/definitions/ZonePolicies"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE modifyZonePolicies subdomainDelegation==true --host https://oz.example.org:9443"
          }
        ]
      }
    },
    "/zone/gui_messages/{id}": {
      "get": {
        "operationId": "get_gui_message",
        "summary": "Get settings of a Onezone GUI message.",
        "description": "Returns settings of a message displayed in Onezone GUI.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onezone",
        "x-onedata-resource": "gui_message",
        "tags": [
          "Onezone"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The message settings.",
            "schema": {
              "$ref": "#/definitions/GuiMessage"
            }
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Possible values are:\n  - cookie_consent_notification - for the contents of cookie consent popup\n  - privacy_policy - for the privacy policy\n  - signin_notification - for the message displayed on the Onezone sign in screen\n",
            "enum": [
              "cookie_consent_notification",
              "privacy_policy",
              "signin_notification"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "modify_gui_message",
        "summary": "Modify settings of a Onezone GUI message.",
        "description": "Enables, disables or modifies a message displayed in Onezone GUI.",
        "x-onedata-version": 3,
        "x-onedata-module": "rest_onezone",
        "x-onedata-resource": "gui_message",
        "tags": [
          "Onezone"
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Changes successfully saved."
          },
          "400": {
            "description": "Invalid request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized request."
          },
          "403": {
            "description": "Forbidden request."
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "Possible values are:\n  - cookie_consent_notification - for the contents of cookie consent popup\n  - privacy_policy - for the privacy policy\n  - signin_notification - for the message displayed on the Onezone sign in screen\n",
            "enum": [
              "cookie_consent_notification",
              "privacy_policy",
              "signin_notification"
            ]
          },
          {
            "name": "MessageChange",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GuiMessage"
            },
            "required": true
          }
        ],
        "x-code-samples": [
          {
            "lang": "Shell",
            "source": "onepanel-rest-cli -u onepanel:$PASSPHRASE modifyGuiMessage id=signin_notification enabled==true --host https://$HOST:9443"
          }
        ]
      }
    }
  },
  "definitions": {
    "Configuration": {
      "type": "object",
      "description": "Public service configuration details",
      "discriminator": "serviceType",
      "x-onedata-oneof": true,
      "x-onedata-subclasses": [
        "op_configuration",
        "oz_configuration"
      ],
      "properties": {
        "clusterId": {
          "type": "string",
          "description": "The Id of cluster record for this cluster. `null` if the cluster is not registered."
        },
        "version": {
          "type": "string",
          "description": "Version of this Onepanel"
        },
        "build": {
          "type": "string",
          "description": "Build number of this Onepanel"
        },
        "deployed": {
          "type": "boolean",
          "default": true,
          "description": "True when cluster deployment is finished"
        }
      },
      "required": [
        "clusterId",
        "version",
        "build",
        "deployed"
      ]
    },
    "op_configuration": {
      "type": "object",
      "description": "Public Oneprovider configuration details",
      "allOf": [
        {
          "$ref": "#/definitions/Configuration"
        },
        {
          "type": "object",
          "properties": {
            "serviceType": {
              "description": "Indicates that this is Oneprovider's panel.",
              "type": "string",
              "enum": [
                "oneprovider"
              ],
              "x-discriminator-value": "oneprovider"
            },
            "providerId": {
              "type": "string",
              "description": "This cluster's Oneprovider Id. `null` if the Oneprovider is not registered or Oneprovider worker is down.\n"
            },
            "zoneDomain": {
              "type": "string",
              "description": "The domain of the Onezone where this Oneprovider is registered. `null` if the Oneprovider is not registered.\n"
            },
            "isRegistered": {
              "type": "boolean",
              "description": "True if the Oneprovider has been registered at a Onezone.\n"
            }
          },
          "required": [
            "serviceType",
            "providerId",
            "zoneDomain"
          ]
        }
      ],
      "example": {
        "serviceType": "oneprovider",
        "providerId": "b4ceb5c9ac793e6b8b36c813b9068757",
        "zoneDomain": "onedata.org",
        "build": "155-gdf98e0f",
        "version": "19.02.2",
        "deployed": true,
        "isRegistered": true
      }
    },
    "oz_configuration": {
      "type": "object",
      "description": "Public Onezone configuration details",
      "allOf": [
        {
          "$ref": "#/definitions/Configuration"
        },
        {
          "type": "object",
          "properties": {
            "serviceType": {
              "description": "Indicates that this is Onezone's panel.",
              "type": "string",
              "enum": [
                "onezone"
              ],
              "x-discriminator-value": "onezone"
            },
            "zoneDomain": {
              "type": "string",
              "description": "The domain of this Onezone cluster. `null` before cluster is configured.\n"
            },
            "zoneName": {
              "type": "string",
              "description": "The name of this Onezone cluster. `null` before cluster is configured.\n"
            }
          },
          "required": [
            "serviceType",
            "zoneDomain"
          ]
        }
      ],
      "example": {
        "serviceType": "onezone",
        "zoneDomain": "onedata.org",
        "zoneName": "OnedataZone",
        "build": "155-gdf98e0f",
        "version": "19.02.2",
        "deployed": true
      }
    },
    "VersionInfo": {
      "type": "object",
      "description": "Service version info.",
      "properties": {
        "release": {
          "type": "string",
          "description": "Release version."
        },
        "build": {
          "type": "string",
          "description": "Build number."
        },
        "gui": {
          "type": "string",
          "description": "GUI version indicated by a SHA256 hash."
        }
      },
      "required": [
        "release",
        "build",
        "gui"
      ],
      "example": {
        "release": "19.02.2",
        "build": "1-gfabf02d",
        "gui": "68e7e1472adb719ddf2d88908775091dfb10e5d0b916f06125ea1af4056044e3"
      }
    },
    "DnsCheck": {
      "type": "object",
      "description": "Gathers results of DNS checks for various aspects of the cluster domain.\nBoth Oneprovider and Onezone return field 'domain' for checking if cluster's domain can be resolved.\nIn Onezone there is additional field 'dnsZone' for checking whether DNS zone management for the Onezone's domain has been delegated to Onezone server (SOA and NS records) allowing for subdomain delegation.\nIf the cluster is configured with an IP neither 'domain' nor 'dnsZone' is returned.\n",
      "properties": {
        "domain": {
          "$ref": "#/definitions/DnsCheckResult"
        },
        "dnsZone": {
          "$ref": "#/definitions/DnsCheckResult"
        },
        "timestamp": {
          "type": "string",
          "description": "Time at which the DNS check was perfmormed. Formatted according to ISO 8601."
        }
      },
      "required": [
        "timestamp"
      ],
      "example": {
        "timestamp": "2018-10-20T21:39:37",
        "domain": {
          "summary": "ok",
          "expected": [
            "10.11.12.13"
          ],
          "got": [
            "10.11.12.13"
          ]
        },
        "dnsZone": {
          "summary": "bad_records",
          "expected": [
            "10.11.12.13"
          ],
          "got": [
            "100.100.102.102"
          ]
        }
      }
    },
    "DnsCheckResult": {
      "type": "object",
      "description": "Describes results obtained from a DNS check. DNS check involves querying DNS servers to ensure publicly visible records match expected values.",
      "properties": {
        "summary": {
          "description": "An interpretation of results obtained from DNS check.\nPossible values are:\n'unresolvable' - query returned empty results;\n'missing_records' - only some of the expected results were returned;\n'bad_records' - none of the expected results were returned;\n'ok' - all of expected values were present in obtained results.\n",
          "type": "string",
          "enum": [
            "unresolvable",
            "missing_records",
            "bad_records",
            "ok"
          ]
        },
        "expected": {
          "description": "List of expected query results.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "got": {
          "description": "List of obtained query results.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recommended": {
          "description": "List of suggested DNS records to set at your DNS provider to fulfill this check.\nEach record is provided in the format of BIND server.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "summary",
        "expected",
        "got",
        "recommended"
      ],
      "example": {
        "missing_records": {
          "description": "Returned when only some of the expected values coule be obtaind.",
          "value": {
            "summary": "missing_records",
            "expected": [
              "149.156.11.33",
              "149.156.11.34"
            ],
            "got": [
              "149.156.11.33"
            ],
            "recommended": [
              "onedata.org. IN A 149.156.11.33",
              "onedata.org. IN A 149.156.11.35"
            ]
          }
        },
        "bad_records": {
          "description": "Returned when none of the expected values coule be obtaind.",
          "value": {
            "summary": "bad_records",
            "expected": [
              "149.156.11.33"
            ],
            "got": [
              "10.11.12.13"
            ],
            "recommended": [
              "onedata.org. IN A 149.156.1l.33"
            ]
          }
        }
      }
    },
    "DnsCheckConfiguration": {
      "type": "object",
      "description": "Configuration of the 'dns_check' method calls.",
      "properties": {
        "dnsServers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A collection of IP addresses for DNS servers used in checking DNS. If empty, local system configuration will be used."
        },
        "builtInDnsServer": {
          "type": "boolean",
          "description": "If true, DNS check will verify that control of DNS zone for Onezone's domain was delegated to the DNS server built into Onezone service.\nThis option is available only in Onezone service.\n"
        },
        "dnsCheckAcknowledged": {
          "type": "boolean",
          "description": "Flag indicating that user completed the DNS check step during interactive deployment.\n"
        }
      },
      "example": {
        "builtInDnsServer": false,
        "dnsServers": [
          "8.8.8.8",
          "8.8.4.4.",
          "1.1.1.1"
        ],
        "dnsCheckAcknowledged": true
      }
    },
    "Error": {
      "type": "object",
      "description": "The generic error model for REST requests.",
      "properties": {
        "error": {
          "description": "The name of an error type.",
          "type": "string"
        },
        "description": {
          "description": "The detailed error description.",
          "type": "string"
        }
      },
      "required": [
        "error",
        "description"
      ],
      "example": {
        "error": "Invalid Request",
        "description": "Error description"
      }
    },
    "GuiMessage": {
      "type": "object",
      "description": "Settings of a message displayed in Onezone GUI.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "True if the message should be displayed."
        },
        "body": {
          "type": "string",
          "description": "HTML content of the message to display."
        }
      }
    },
    "Ids": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "description": "List of ids.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "ids"
      ],
      "example": {
        "ids": [
          "26cbc2b20f92416eb9f3cba65e50c1d2",
          "9ad94a9296d145a1a2b894f5fd7f48b0",
          "95ad2c09508f47198635e46a6ea4d005"
        ]
      }
    },
    "Token": {
      "type": "object",
      "description": "A token",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "required": [
        "token"
      ]
    },
    "ClusterDetails": {
      "type": "object",
      "description": "Details of a cluster.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the cluster record"
        },
        "type": {
          "type": "string",
          "description": "Type of the cluster",
          "enum": [
            "oneprovider",
            "onezone"
          ]
        },
        "serviceId": {
          "type": "string",
          "description": "The Id of the service hosted on this cluster - depending on the type equal to the Oneprovider Id or \"onezone\" in case of Onezone cluster\n"
        },
        "workerVersion": {
          "$ref": "#/definitions/VersionInfo"
        },
        "onepanelVersion": {
          "$ref": "#/definitions/VersionInfo"
        },
        "onepanelProxy": {
          "type": "boolean",
          "description": "Is Onepanel proxy enabled - if so, onepanel GUI is served on cluster's domain at port 443 (rather than 9443).\n"
        }
      },
      "required": [
        "id",
        "type",
        "serviceId",
        "workerVersion",
        "onepanelVersion",
        "onepanelProxy"
      ]
    },
    "ClusterMembersSummary": {
      "type": "object",
      "description": "Summary of cluster members, listing number of direct and effective users and groups.",
      "properties": {
        "usersCount": {
          "type": "integer",
          "description": "Number of users belonging directly to the cluster."
        },
        "effectiveUsersCount": {
          "type": "integer",
          "description": "Number of users belonging directly and indirectly to the cluster."
        },
        "groupsCount": {
          "type": "integer",
          "description": "Number of groups belonging directly to the cluster."
        },
        "effectiveGroupsCount": {
          "type": "integer",
          "description": "Number of groups belonging directly and indirectly to the cluster."
        }
      }
    },
    "RemoteProviderDetails": {
      "type": "object",
      "description": "Information about another Oneprovider.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Oneprovider Id assigned by Onezone."
        },
        "name": {
          "type": "string",
          "description": "The name under which the Oneprovider has been registered in Onezone."
        },
        "domain": {
          "type": "string",
          "description": "The fully qualified domain name of the Oneprovider."
        },
        "geoLongitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical longitude of the provider."
        },
        "geoLatitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical latitude of the provider."
        },
        "cluster": {
          "type": "string",
          "description": "The Id of the corresponding cluster record."
        },
        "online": {
          "type": "boolean",
          "description": "Indicates if the Oneprovider is currently online."
        }
      },
      "required": [
        "id",
        "name",
        "domain",
        "geoLongitude",
        "geoLatitude",
        "cluster",
        "online"
      ],
      "example": {
        "id": "VAiDGZbs3k0FD8jPhyU1",
        "name": "Provider 1",
        "domain": "provider.example.com",
        "geoLongitude": -24.3776025,
        "geoLatitude": -128.3519364,
        "cluster": "kas90GcjRa9352ndfCxhGyYY9dx",
        "online": true
      }
    },
    "EmergencyPassphraseChangeRequest": {
      "type": "object",
      "description": "Emergency passphrase to set and old passphrase to authorize the change.",
      "properties": {
        "newPassphrase": {
          "description": "New passphrase to be set.",
          "type": "string"
        },
        "currentPassphrase": {
          "description": "Currently set passphrase. Not required when setting the passphrase for the first time.",
          "type": "string"
        }
      },
      "required": [
        "newPassphrase"
      ]
    },
    "EmergencyPassphraseStatus": {
      "type": "object",
      "description": "Emergency passphrase status.",
      "properties": {
        "isSet": {
          "type": "boolean",
          "description": "True if the passphrase is set."
        }
      }
    },
    "Host": {
      "type": "object",
      "description": "Details of a cluster host.",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "Host's hostname."
        }
      },
      "required": [
        "hostname"
      ]
    },
    "HostAddRequest": {
      "type": "object",
      "description": "Details of host added to cluster",
      "properties": {
        "address": {
          "type": "string",
          "description": "Address at which the host is available, IP or hostname.\n"
        }
      },
      "required": [
        "address"
      ],
      "example": {
        "address": "node2.onedata.org"
      }
    },
    "JoinClusterRequest": {
      "type": "object",
      "description": "Information allowing new host to join the cluster.",
      "properties": {
        "clusterHost": {
          "type": "string",
          "description": "Hostname of an existing cluster node."
        },
        "cookie": {
          "type": "string",
          "x-onedata-datatype": "atom",
          "description": "The cookie is a character sequence that is common for all the cluster nodes. If this parameter is not provided, in case of a cluster initialization request, it will be generated, and in case of a cluster extension request the current cookie value will be used. However, if the cluster cookie and the cookie of the host that is about to join the cluster doesn't match there will be a connection error.\n"
        }
      },
      "required": [
        "clusterHost"
      ],
      "example": {
        "cookie": "AS2KLJH1231AJSHDKJBC12KS578A3SDA",
        "clusterHost": "node1.onedata.org"
      }
    },
    "OnezoneInfo": {
      "type": "object",
      "description": "Information which can be obtained about remote Onezone.",
      "properties": {
        "online": {
          "type": "boolean",
          "description": "True if connection to the Onezone was achieved.\nIf false, fields other than 'domain' will not be sent.\n"
        },
        "version": {
          "type": "string",
          "description": "Onezone cluster version."
        },
        "domain": {
          "type": "string",
          "description": "Domain of the Onezone."
        },
        "name": {
          "type": "string",
          "description": "Name of the Onezone cluster."
        },
        "compatible": {
          "type": "boolean",
          "description": "True if versions of this Oneprovider and the Onezone are compatible."
        },
        "subdomainDelegationSupported": {
          "type": "boolean",
          "description": "Whether given Onezone allows subdomain delegation."
        }
      },
      "required": [
        "domain",
        "online"
      ]
    },
    "OnezoneUser": {
      "type": "object",
      "description": "Describes a user account.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique user Id."
        },
        "fullName": {
          "type": "string",
          "description": "User's full name (given names + surname)."
        },
        "username": {
          "type": "string",
          "description": "User's human-readable identifier, unique across the system. Makes it easier to identify the user and can be used for signing in with password.\n"
        }
      },
      "required": [
        "userId",
        "fullName"
      ],
      "example": {
        "userId": "f1c8b1a37aa7447b22eb65a742d40524",
        "fullName": "Rudolf Lingens",
        "username": "r.lingens"
      }
    },
    "OnezoneUserCreateRequest": {
      "type": "object",
      "description": "The new Onezone user account details",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "groups": {
          "description": "Ids of Onezone groups to which the user should be added. The groups must already exist.",
          "type": "array",
          "x-onedata-default-value": "[]",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "username",
        "password"
      ],
      "example": {
        "username": "admin",
        "password": "somePassword",
        "groups": [
          "admins"
        ]
      }
    },
    "CurrentUser": {
      "type": "object",
      "description": "Information about the authenticated user.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user Id."
        },
        "username": {
          "type": "string",
          "description": "User's full name (given names + surname)."
        },
        "clusterPrivileges": {
          "type": "array",
          "description": "List of cluster privileges held by the user in the current cluster.\n",
          "items": {
            "type": "string",
            "enum": [
              "cluster_view",
              "cluster_update",
              "cluster_delete",
              "cluster_view_privileges",
              "cluster_set_privileges",
              "cluster_add_user",
              "cluster_remove_user",
              "cluster_add_group",
              "cluster_remove_group"
            ]
          }
        }
      },
      "required": [
        "userId",
        "username",
        "userRole"
      ],
      "example": {
        "userId": "i3h2bp4TjPVuOyvXulbW",
        "username": "admin",
        "clusterPrivileges": [
          "cluster_update"
        ]
      }
    },
    "PasswordChangeRequest": {
      "type": "object",
      "description": "Request to change user's password",
      "properties": {
        "newPassword": {
          "type": "string",
          "description": "The new user password."
        }
      },
      "required": [
        "newPassword"
      ],
      "example": {
        "newPassword": "P@@$$W0RD2"
      }
    },
    "PanelConfiguration": {
      "type": "object",
      "description": "The panel configuration.",
      "properties": {
        "interactiveDeployment": {
          "type": "boolean",
          "default": true,
          "description": "Indicates that interactive deployment is being performed.\nIf false, users entering GUI will not be asked to complete the configuration. In that case default values will be used, available for change later via appropriate Onepanel GUI pages or REST.\n"
        },
        "guiDebugMode": {
          "type": "boolean",
          "default": false,
          "description": "When true, all GUIs hosted in this cluster will print debug logs to browser console.\n"
        }
      }
    },
    "ClusterWorkers": {
      "type": "object",
      "description": "The cluster worker service configuration.",
      "properties": {
        "nodes": {
          "type": "array",
          "description": "The list of aliases of cluster worker nodes.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "nodes"
      ]
    },
    "ClusterManagers": {
      "type": "object",
      "description": "The cluster manager service configuration.",
      "properties": {
        "mainNode": {
          "type": "string",
          "description": "The alias of the main cluster manager node."
        },
        "nodes": {
          "type": "array",
          "description": "The list of aliases of cluster manager nodes.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "mainNode",
        "nodes"
      ]
    },
    "ClusterDatabases": {
      "type": "object",
      "description": "The cluster database service configuration.",
      "properties": {
        "nodes": {
          "type": "array",
          "description": "The list of aliases of cluster database nodes.",
          "items": {
            "type": "string"
          }
        },
        "serverQuota": {
          "type": "integer",
          "description": "The server quota is the RAM memory in bytes that is allocated to the server when Couchbase Server is first installed. This sets the limit of RAM allocated by Couchbase for caching data for all buckets and is configured on a per-node basis.\n"
        },
        "bucketQuota": {
          "type": "integer",
          "description": "The bucket quota is the amount of RAM memory in bytes allocated to an individual bucket for caching data.\n"
        }
      },
      "required": [
        "nodes"
      ]
    },
    "ClusterIps": {
      "type": "object",
      "description": "External IPs used by cluster nodes.",
      "properties": {
        "isConfigured": {
          "type": "boolean",
          "description": "If true, user has already sent a request updating IPs thus marking them as accepted.\n"
        },
        "hosts": {
          "type": "object",
          "description": "The collection of cluster nodes associated with their IPs.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "isConfigured",
        "hosts"
      ]
    },
    "ModifyClusterIps": {
      "type": "object",
      "description": "External IPs used by cluster nodes.",
      "properties": {
        "hosts": {
          "type": "object",
          "description": "The collection of cluster nodes associated with their IPs.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "hosts"
      ]
    },
    "StorageDetails": {
      "type": "object",
      "description": "The cluster storage configuration.",
      "discriminator": "type",
      "x-onedata-oneof": true,
      "x-onedata-subclasses": [
        "posix",
        "s3",
        "ceph",
        "cephrados",
        "swift",
        "glusterfs",
        "nulldevice",
        "webdav"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of storage."
        },
        "id": {
          "type": "string",
          "description": "The Id of storage."
        },
        "name": {
          "type": "string",
          "description": "The name of storage."
        },
        "verificationPassed": {
          "type": "boolean",
          "readOnly": true,
          "description": "Result of storage verification (reading and writing a file). Returned only on PATCH requests for read-write storages."
        },
        "timeout": {
          "type": "integer",
          "description": "Storage operation timeout in milliseconds."
        },
        "readonly": {
          "type": "boolean",
          "default": false,
          "description": "Defines whether storage is readonly."
        },
        "lumaEnabled": {
          "type": "boolean",
          "description": "If true LUMA and reverse LUMA services will be enabled.",
          "default": false
        },
        "lumaUrl": {
          "type": "string",
          "description": "URL of external LUMA service"
        },
        "lumaApiKey": {
          "type": "string",
          "description": "LUMA API Key, must be identical with API Key in external LUMA service."
        }
      }
    },
    "StorageDetailsModify": {
      "type": "object",
      "description": "The part of storage configuration which can be modified after storage creation.",
      "discriminator": "type",
      "x-onedata-oneof": true,
      "x-onedata-subclasses": [
        "posix_modify",
        "s3_modify",
        "ceph_modify",
        "cephrados_modify",
        "swift_modify",
        "glusterfs_modify",
        "nulldevice_modify",
        "webdav_modify"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of storage."
        },
        "timeout": {
          "type": "integer",
          "description": "Storage operation timeout in milliseconds."
        },
        "readonly": {
          "type": "boolean",
          "description": "Defines whether storage is readonly."
        },
        "lumaEnabled": {
          "type": "boolean",
          "description": "If true LUMA and reverse LUMA services will be enabled."
        },
        "lumaUrl": {
          "type": "string",
          "description": "URL of external LUMA service"
        },
        "lumaApiKey": {
          "type": "string",
          "description": "LUMA API Key, must be identical with API Key in external LUMA service."
        }
      }
    },
    "Posix": {
      "description": "The POSIX storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetails"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of storage.",
              "enum": [
                "posix"
              ],
              "x-discriminator-value": "posix"
            },
            "mountPoint": {
              "type": "string",
              "description": "The absolute path to the directory where the POSIX storage is mounted on the cluster nodes.\n"
            },
            "storagePathType": {
              "type": "string",
              "default": "canonical",
              "x-onedata-default-value": "<<\"canonical\">>",
              "description": "Determines how the logical file paths will be mapped on the storage.\n'canonical' paths reflect the logical file names and directory structure,\nhowever each rename operation will require renaming the files on the storage.\n'flat' paths are based on unique file UUID's and do not require on-storage\nrename when logical file name is changed.\n"
            }
          },
          "required": [
            "type",
            "mountPoint"
          ]
        }
      ],
      "example": {
        "type": "POSIX",
        "name": "SomePosix",
        "mountPoint": "/mnt/nfs"
      }
    },
    "PosixModify": {
      "description": "The POSIX storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetailsModify"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of the modified storage. Must match the type of existing storage, needed only for OpenAPI polymorphism disambiguation.",
              "enum": [
                "posix"
              ],
              "x-discriminator-value": "posix"
            },
            "mountPoint": {
              "type": "string",
              "description": "The absolute path to the directory where the POSIX storage is mounted on the cluster nodes.\n"
            }
          },
          "required": [
            "type"
          ]
        }
      ],
      "example": {
        "type": "posix",
        "timeout": 500
      }
    },
    "S3": {
      "description": "The Simple Storage Service configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetails"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of storage.",
              "enum": [
                "s3"
              ],
              "x-discriminator-value": "s3"
            },
            "hostname": {
              "type": "string",
              "description": "The hostname of a machine where S3 storage is installed."
            },
            "bucketName": {
              "type": "string",
              "description": "The storage bucket name."
            },
            "accessKey": {
              "type": "string",
              "description": "The access key to the S3 storage."
            },
            "secretKey": {
              "type": "string",
              "description": "The secret key to the S3 storage."
            },
            "signatureVersion": {
              "type": "integer",
              "default": 4,
              "enum": [
                2,
                4
              ],
              "description": "The version of signature used to sign requests. One of: 2, 4. Default: 4.\n"
            },
            "blockSize": {
              "type": "integer",
              "description": "Storage block size in bytes. In case the block size is `0` and `canonical` path type is selected, each file is stored in a single S3 object. This value must be set to `0` to enable data import from an existing S3 bucket.\n"
            },
            "maximumCanonicalObjectSize": {
              "type": "integer",
              "description": "Defines the maximum size for objects, which can be modified on the S3 storage in `canonical` path mode. In this mode, entire file needs to be downloaded to memory, modified and uploaded back, which is impractical for large files (default 64 MiB).\n",
              "default": 67108864,
              "x-onedata-default-value": 67108864
            },
            "fileMode": {
              "type": "string",
              "description": "Defines the file permissions, which files imported from S3 storage will have in Onedata. Values should be provided in octal format e.g. `0644`.\n",
              "default": "0644"
            },
            "dirMode": {
              "type": "string",
              "description": "Defines the directory mode which directories imported from S3 storage will have in Onedata. Values should be provided in octal format e.g. `0775`.\n",
              "default": "0775"
            },
            "insecure": {
              "type": "boolean",
              "default": false,
              "description": "Defines whether storage administrator credentials (accessKey and secretKey) may be used by users without storage accounts to access storage in direct IO mode.\n"
            },
            "storagePathType": {
              "type": "string",
              "default": "flat",
              "x-onedata-default-value": "<<\"flat\">>",
              "description": "Determines how the logical file paths will be mapped on the storage.\n'canonical' paths reflect the logical file names and directory structure,\nhowever each rename operation will require renaming the files on the storage.\n'flat' paths are based on unique file UUID's and do not require on-storage\nrename when logical file name is changed.\n"
            }
          },
          "required": [
            "type",
            "hostname",
            "bucketName",
            "accessKey",
            "secretKey"
          ]
        }
      ],
      "example": {
        "type": "s3",
        "name": "SomeS3",
        "hostname": "s3.example.com",
        "bucketName": "bucket1.iam.example.com",
        "accessKey": "LKJHLAKJSHD887678678ASDKNJKASD9898789ASD",
        "secretKey": "ASASDLLASD89798&LKJHLAKJSHD887678678ASDKNJK"
      }
    },
    "S3Modify": {
      "description": "The Simple Storage Service configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetailsModify"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of the modified storage. Must match the type of existing storage, needed only for OpenAPI polymorphism disambiguation.",
              "enum": [
                "s3"
              ],
              "x-discriminator-value": "s3"
            },
            "hostname": {
              "type": "string",
              "description": "The hostname of a machine where S3 storage is installed."
            },
            "bucketName": {
              "type": "string",
              "description": "The storage bucket name."
            },
            "accessKey": {
              "type": "string",
              "description": "The access key to the S3 storage."
            },
            "secretKey": {
              "type": "string",
              "description": "The secret key to the S3 storage."
            },
            "signatureVersion": {
              "type": "integer",
              "description": "The version of signature used to sign requests. One of: 2, 4. Default: 4.\n",
              "enum": [
                2,
                4
              ]
            },
            "maximumCanonicalObjectSize": {
              "type": "integer",
              "description": "Defines the maximum size for objects, which can be modified on the S3 storage in `canonical` path mode. In this mode, entire file needs to be downloaded to memory, modified and uploaded back, which is impractical for large files (default 64 MiB).\n"
            },
            "fileMode": {
              "type": "string",
              "description": "Defines the file permissions, which files imported from S3 storage will have in Onedata. Values should be provided in octal format e.g. `0644`.\n"
            },
            "dirMode": {
              "type": "string",
              "description": "Defines the directory mode which directories imported from S3 storage will have in Onedata. Values should be provided in octal format e.g. `0775`.\n"
            },
            "insecure": {
              "type": "boolean",
              "description": "Defines whether storage administrator credentials (accessKey and secretKey) may be used by users without storage accounts to access storage in direct IO mode.\n"
            }
          },
          "required": [
            "type"
          ]
        }
      ],
      "example": {
        "type": "s3",
        "name": "SomeS3",
        "hostname": "s3.example.com",
        "bucketName": "bucket1.iam.example.com",
        "accessKey": "LKJHLAKJSHD887678678ASDKNJKASD9898789ASD",
        "secretKey": "ASASDLLASD89798&LKJHLAKJSHD887678678ASDKNJK"
      }
    },
    "Ceph": {
      "description": "The Ceph storage configuration (uses libradosstriper).",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetails"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of storage.",
              "enum": [
                "ceph"
              ],
              "x-discriminator-value": "ceph"
            },
            "username": {
              "type": "string",
              "description": "The username of the Ceph cluster administrator."
            },
            "key": {
              "type": "string",
              "description": "The admin key to access the Ceph cluster."
            },
            "monitorHostname": {
              "type": "string",
              "description": "The monitor host name."
            },
            "clusterName": {
              "type": "string",
              "description": "The Ceph cluster name."
            },
            "poolName": {
              "type": "string",
              "description": "The Ceph pool name."
            },
            "insecure": {
              "type": "boolean",
              "default": false,
              "description": "Defines whether storage administrator credentials (username and key) may be used by users without storage accounts to access storage in direct IO mode.\n"
            },
            "storagePathType": {
              "type": "string",
              "default": "flat",
              "x-onedata-default-value": "<<\"flat\">>",
              "description": "Determines how the logical file paths will be mapped on the storage.\n'canonical' paths reflect the logical file names and directory structure,\nhowever each rename operation will require renaming the files on the storage.\n'flat' paths are based on unique file UUID's and do not require on-storage\nrename when logical file name is changed.\n"
            }
          },
          "required": [
            "type",
            "username",
            "key",
            "monitorHostname",
            "clusterName",
            "poolName"
          ]
        }
      ],
      "example": {
        "type": "ceph",
        "name": "SomeCeph",
        "username": "user1",
        "key": "LKJASHD6876ASDBJHV65765ASD",
        "monitorHostname": "test.example.com",
        "clusterName": "CephCluster1",
        "poolName": "data",
        "insecure": true
      }
    },
    "CephModify": {
      "description": "The Ceph storage configuration (uses libradosstriper).",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetailsModify"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of the modified storage. Must match the type of existing storage, needed only for OpenAPI polymorphism disambiguation.",
              "enum": [
                "ceph"
              ],
              "x-discriminator-value": "ceph"
            },
            "username": {
              "type": "string",
              "description": "The username of the Ceph cluster administrator."
            },
            "key": {
              "type": "string",
              "description": "The admin key to access the Ceph cluster."
            },
            "monitorHostname": {
              "type": "string",
              "description": "The monitor host name."
            },
            "clusterName": {
              "type": "string",
              "description": "The Ceph cluster name."
            },
            "poolName": {
              "type": "string",
              "description": "The Ceph pool name."
            },
            "insecure": {
              "type": "boolean",
              "description": "Defines whether storage administrator credentials (username and key) may be used by users without storage accounts to access storage in direct IO mode.\n"
            }
          },
          "required": [
            "type"
          ]
        }
      ],
      "example": {
        "type": "ceph",
        "username": "user1",
        "key": "LKJASHD6876ASDBJHV65765ASD",
        "insecure": true
      }
    },
    "Cephrados": {
      "description": "The Ceph storage configuration (uses librados).",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetails"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of storage.",
              "enum": [
                "cephrados"
              ],
              "x-discriminator-value": "cephrados"
            },
            "username": {
              "type": "string",
              "description": "The username of the Ceph cluster administrator."
            },
            "key": {
              "type": "string",
              "description": "The admin key to access the Ceph cluster."
            },
            "monitorHostname": {
              "type": "string",
              "description": "The monitor host name."
            },
            "clusterName": {
              "type": "string",
              "description": "The Ceph cluster name."
            },
            "poolName": {
              "type": "string",
              "description": "The Ceph pool name."
            },
            "blockSize": {
              "type": "integer",
              "description": "Storage block size in bytes.",
              "default": 4194304
            },
            "insecure": {
              "type": "boolean",
              "default": false,
              "description": "Defines whether storage administrator credentials (username and key) may be used by users without storage accounts to access storage in direct IO mode.\n"
            },
            "storagePathType": {
              "type": "string",
              "default": "flat",
              "x-onedata-default-value": "<<\"flat\">>",
              "description": "Determines how the logical file paths will be mapped on the storage.\n'canonical' paths reflect the logical file names and directory structure,\nhowever each rename operation will require renaming the files on the storage.\n'flat' paths are based on unique file UUID's and do not require on-storage\nrename when logical file name is changed.\n"
            }
          },
          "required": [
            "type",
            "username",
            "key",
            "monitorHostname",
            "clusterName",
            "poolName"
          ]
        }
      ],
      "example": {
        "type": "cephrados",
        "name": "SomeCeph",
        "username": "user1",
        "key": "LKJASHD6876ASDBJHV65765ASD",
        "monitorHostname": "test.example.com",
        "clusterName": "CephCluster1",
        "poolName": "data",
        "insecure": true,
        "blockSize": 10485760
      }
    },
    "CephradosModify": {
      "description": "The Ceph storage configuration (uses librados).",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetailsModify"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of the modified storage. Must match the type of existing storage, needed only for OpenAPI polymorphism disambiguation.",
              "enum": [
                "cephrados"
              ],
              "x-discriminator-value": "cephrados"
            },
            "username": {
              "type": "string",
              "description": "The username of the Ceph cluster administrator."
            },
            "key": {
              "type": "string",
              "description": "The admin key to access the Ceph cluster."
            },
            "monitorHostname": {
              "type": "string",
              "description": "The monitor host name."
            },
            "clusterName": {
              "type": "string",
              "description": "The Ceph cluster name."
            },
            "poolName": {
              "type": "string",
              "description": "The Ceph pool name."
            },
            "insecure": {
              "type": "boolean",
              "description": "Defines whether storage administrator credentials (username and key) may be used by users without storage accounts to access storage in direct IO mode.\n"
            }
          },
          "required": [
            "type"
          ]
        }
      ],
      "example": {
        "type": "cephrados",
        "name": "SomeCeph",
        "username": "user1",
        "key": "LKJASHD6876ASDBJHV65765ASD",
        "monitorHostname": "test.example.com",
        "clusterName": "CephCluster1",
        "poolName": "data",
        "insecure": true
      }
    },
    "Swift": {
      "description": "The OpenStack Swift configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetails"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of storage.",
              "enum": [
                "swift"
              ],
              "x-discriminator-value": "swift"
            },
            "authUrl": {
              "type": "string",
              "description": "The URL to OpenStack Keystone identity service."
            },
            "tenantName": {
              "type": "string",
              "description": "The name of the tenant to which the user belongs."
            },
            "containerName": {
              "type": "string",
              "description": "The name of the Swift storage container."
            },
            "username": {
              "type": "string",
              "description": "The Keystone authentication username."
            },
            "password": {
              "type": "string",
              "description": "The Keystone authentication password."
            },
            "blockSize": {
              "type": "integer",
              "description": "Storage block size in bytes."
            },
            "insecure": {
              "type": "boolean",
              "default": false,
              "description": "Defines whether storage administrator credentials (username and password) may be used by users without storage accounts to access storage in direct IO mode.\n"
            },
            "storagePathType": {
              "type": "string",
              "default": "flat",
              "x-onedata-default-value": "<<\"flat\">>",
              "description": "Determines how the logical file paths will be mapped on the storage.\n'canonical' paths reflect the logical file names and directory structure,\nhowever each rename operation will require renaming the files on the storage.\n'flat' paths are based on unique file UUID's and do not require on-storage\nrename when logical file name is changed.\n"
            }
          },
          "required": [
            "type",
            "authUrl",
            "tenantName",
            "containerName",
            "username",
            "password"
          ]
        }
      ],
      "example": {
        "type": "swift",
        "name": "SomeSwift",
        "authUrl": "http://keystone2.example.com",
        "tenantName": "Project1",
        "containerName": "Container1",
        "username": "user",
        "password": "p@$$w0rd",
        "insecure": true
      }
    },
    "SwiftModify": {
      "description": "The OpenStack Swift configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetailsModify"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of the modified storage. Must match the type of existing storage, needed only for OpenAPI polymorphism disambiguation.",
              "enum": [
                "swift"
              ],
              "x-discriminator-value": "swift"
            },
            "authUrl": {
              "type": "string",
              "description": "The URL to OpenStack Keystone identity service."
            },
            "tenantName": {
              "type": "string",
              "description": "The name of the tenant to which the user belongs."
            },
            "containerName": {
              "type": "string",
              "description": "The name of the Swift storage container."
            },
            "username": {
              "type": "string",
              "description": "The Keystone authentication username."
            },
            "password": {
              "type": "string",
              "description": "The Keystone authentication password."
            },
            "insecure": {
              "type": "boolean",
              "description": "Defines whether storage administrator credentials (username and password) may be used by users without storage accounts to access storage in direct IO mode.\n"
            }
          },
          "required": [
            "type"
          ]
        }
      ],
      "example": {
        "type": "swift",
        "name": "SomeSwift",
        "authUrl": "http://keystone2.example.com",
        "tenantName": "Project1",
        "containerName": "Container1",
        "username": "user",
        "password": "p@$$w0rd",
        "insecure": true
      }
    },
    "Glusterfs": {
      "description": "The GlusterFS storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetails"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of storage.",
              "enum": [
                "glusterfs"
              ],
              "x-discriminator-value": "glusterfs"
            },
            "volume": {
              "type": "string",
              "description": "The name of the volume to use as a storage backend."
            },
            "hostname": {
              "type": "string",
              "description": "The hostname (IP address or FQDN) of GlusterFS volume server."
            },
            "port": {
              "type": "integer",
              "description": "The GlusterFS port on volume server.",
              "default": 24007
            },
            "transport": {
              "type": "string",
              "description": "The transport protocol to use to connect to the volume server.",
              "enum": [
                "tcp",
                "rdma",
                "socket"
              ],
              "default": "tcp"
            },
            "mountPoint": {
              "type": "string",
              "description": "Relative mountpoint within the volume which should be used by Oneprovider.",
              "default": ""
            },
            "xlatorOptions": {
              "type": "string",
              "description": "Volume specific GlusterFS translator options, in the format:\n  TRANSLATOR1.OPTION1=VALUE1;TRANSLATOR2.OPTION2=VALUE2;...\n",
              "default": ""
            },
            "storagePathType": {
              "type": "string",
              "default": "canonical",
              "x-onedata-default-value": "<<\"canonical\">>",
              "description": "Determines how the logical file paths will be mapped on the storage.\n'canonical' paths reflect the logical file names and directory structure,\nhowever each rename operation will require renaming the files on the storage.\n'flat' paths are based on unique file UUID's and do not require on-storage\nrename when logical file name is changed.\n"
            }
          },
          "required": [
            "type",
            "volume",
            "hostname"
          ]
        }
      ],
      "example": {
        "type": "glusterfs",
        "name": "LocalGluster",
        "volume": "Volume1",
        "hostname": "volfileserver.example.com",
        "transport": "tcp",
        "port": 24007,
        "mountPoint": "",
        "xlatorOptions": "transport.socket.ssl-enabled=on"
      }
    },
    "GlusterfsModify": {
      "description": "The GlusterFS storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetailsModify"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of the modified storage. Must match the type of existing storage, needed only for OpenAPI polymorphism disambiguation.",
              "enum": [
                "glusterfs"
              ],
              "x-discriminator-value": "glusterfs"
            },
            "volume": {
              "type": "string",
              "description": "The name of the volume to use as a storage backend."
            },
            "hostname": {
              "type": "string",
              "description": "The hostname (IP address or FQDN) of GlusterFS volume server."
            },
            "port": {
              "type": "integer",
              "description": "The GlusterFS port on volume server."
            },
            "transport": {
              "type": "string",
              "description": "The transport protocol to use to connect to the volume server.",
              "enum": [
                "tcp",
                "rdma",
                "socket"
              ]
            },
            "mountPoint": {
              "type": "string",
              "description": "Relative mountpoint within the volume which should be used by Oneprovider."
            },
            "xlatorOptions": {
              "type": "string",
              "description": "Volume specific GlusterFS translator options, in the format:\n  TRANSLATOR1.OPTION1=VALUE1;TRANSLATOR2.OPTION2=VALUE2;...\n"
            }
          },
          "required": [
            "type"
          ]
        }
      ],
      "example": {
        "type": "glusterfs",
        "name": "LocalGluster",
        "volume": "Volume1",
        "hostname": "volfileserver.example.com",
        "transport": "tcp",
        "port": 24007,
        "mountPoint": "",
        "xlatorOptions": "transport.socket.ssl-enabled=on"
      }
    },
    "Nulldevice": {
      "description": "The Null Device storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetails"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of storage.",
              "enum": [
                "nulldevice"
              ],
              "x-discriminator-value": "nulldevice"
            },
            "latencyMin": {
              "type": "integer",
              "description": "Minimum latency in milliseconds, which should be simulated for\nselected operations.\n",
              "default": 0
            },
            "latencyMax": {
              "type": "integer",
              "description": "Maximum latency in milliseconds, which should be simulated for\nselected operations.\n",
              "default": 0
            },
            "timeoutProbability": {
              "type": "number",
              "format": "float",
              "description": "Probability (0.0, 1.0), with which an operation should return\na timeout error.\n",
              "default": 0
            },
            "filter": {
              "type": "string",
              "description": "Comma-separated list of filesystem operations, for which latency\nand timeout should be simulated. Empty or '*' mean all operations\nwill be affected.\n",
              "default": "*"
            },
            "storagePathType": {
              "type": "string",
              "default": "canonical",
              "x-onedata-default-value": "<<\"canonical\">>",
              "description": "Determines how the logical file paths will be mapped on the storage.\n'canonical' paths reflect the logical file names and directory structure,\nhowever each rename operation will require renaming the files on the storage.\n'flat' paths are based on unique file UUID's and do not require on-storage\nrename when logical file name is changed.\n"
            },
            "simulatedFilesystemParameters": {
              "type": "string",
              "default": "",
              "description": "Specifies the parameters for a simulated null device filesystem.\nFor example `2-2:2-2:0-1` will generate a filesystem tree which has 2\ndirectories (`0` and `1`) and 2 files (`2` and `3`) in the root of\nthe filesystem, each of these directories will have 2 subdirectories\n(`0` and `1`) and 2 files (`2` and `3`) and each of these\nsubdirectories has only a single file (`0`).\nDefault empty string disables the simulated filesystem feature.\n"
            },
            "simulatedFilesystemGrowSpeed": {
              "type": "number",
              "format": "float",
              "default": 0,
              "description": "Determines the simulated filesystem grow rate. Default 0.0 value\nwill cause all the files and directories defined by the\n`simulatedFilesystemParameters` specification to be visible immediately.\nFor example value of 0.01 will increase the number of the visible\nfilesystem entries by 1 file per 100 seconds, while 100.0 will increase it\nby 100 files per second.\n"
            }
          },
          "required": [
            "type"
          ]
        }
      ],
      "example": {
        "type": "nulldevice",
        "name": "Slow storage",
        "latencyMin": 250,
        "latencyMax": 750,
        "timeoutProbability": 0.1,
        "filter": "read,write,open",
        "simulatedFilesystemParameters": "2-2:2-2:0-3",
        "simulatedFilesystemGrowSpeed": 5
      }
    },
    "NulldeviceModify": {
      "description": "The Null Device storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetailsModify"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of the modified storage. Must match the type of existing storage, needed only for OpenAPI polymorphism disambiguation.",
              "enum": [
                "nulldevice"
              ],
              "x-discriminator-value": "nulldevice"
            },
            "latencyMin": {
              "type": "integer",
              "description": "Minimum latency in milliseconds, which should be simulated for\nselected operations.\n"
            },
            "latencyMax": {
              "type": "integer",
              "description": "Maximum latency in milliseconds, which should be simulated for\nselected operations.\n"
            },
            "timeoutProbability": {
              "type": "number",
              "format": "float",
              "description": "Probability (0.0, 1.0), with which an operation should return\na timeout error.\n"
            },
            "filter": {
              "type": "string",
              "description": "Comma-separated list of filesystem operations, for which latency\nand timeout should be simulated. Empty or '*' mean all operations\nwill be affected.\n"
            },
            "simulatedFilesystemParameters": {
              "type": "string",
              "description": "Specifies the parameters for a simulated null device filesystem.\nFor example `2-2:2-2:0-1` will generate a filesystem tree which has 2\ndirectories (`0` and `1`) and 2 files (`2` and `3`) in the root of\nthe filesystem, each of these directories will have 2 subdirectories\n(`0` and `1`) and 2 files (`2` and `3`) and each of these\nsubdirectories has only a single file (`0`).\nDefault empty string disables the simulated filesystem feature.\n"
            },
            "simulatedFilesystemGrowSpeed": {
              "type": "number",
              "format": "float",
              "description": "Determines the simulated filesystem grow rate. Default 0.0 value\nwill cause all the files and directories defined by the\n`simulatedFilesystemParameters` specification to be visible immediately.\nFor example value of 0.01 will increase the number of the visible\nfilesystem entries by 1 file per 100 seconds, while 100.0 will increase it\nby 100 files per second.\n"
            }
          },
          "required": [
            "type"
          ]
        }
      ],
      "example": {
        "type": "nulldevice",
        "name": "Slow storage",
        "latencyMin": 250,
        "latencyMax": 750,
        "timeoutProbability": 0.1,
        "filter": "read,write,open",
        "simulatedFilesystemParameters": "2-2:2-2:0-3",
        "simulatedFilesystemGrowSpeed": 5
      }
    },
    "Webdav": {
      "description": "The WebDAV storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetails"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of storage.",
              "enum": [
                "webdav"
              ],
              "x-discriminator-value": "webdav"
            },
            "endpoint": {
              "type": "string",
              "description": "Full URL of the WebDAV server, including scheme (http or https) and path.\n"
            },
            "verifyServerCertificate": {
              "type": "boolean",
              "description": "Determines whether Oneprovider should verify the certificate of the WebDAV server.\n",
              "default": true,
              "x-onedata-default-value": true
            },
            "credentialsType": {
              "type": "string",
              "description": "Determines the types of credentials provided in the credentials field.\n",
              "enum": [
                "none",
                "basic",
                "token",
                "oauth2"
              ],
              "default": "none",
              "x-onedata-default-value": "none"
            },
            "credentials": {
              "type": "string",
              "description": "The credentials to authenticate with the WebDAV server. `basic` credentials should be provided in the form `username:password`, for `token` just the token. In case of `oauth2`, this field should contain the username for the WebDAV, while the token will be obtained and refreshed automatically in the background. For `none` this field is ignored.\n"
            },
            "oauth2IdP": {
              "type": "string",
              "description": "In case `oauth2` credential type is selected and Onezone is configured with support for multiple external IdP's, this field must contain the name of the IdP which authenticates requests to the WebDAV endpoint. If Onezone has only one external IdP, it will be selected automatically.\n"
            },
            "onedataAccessToken": {
              "type": "string",
              "description": "When registering storage in `insecure` mode with `oauth2` external IdP, this field must contain a valid Onedata access token of the user on whose behalf the WebDAV storage will be accessed by all users with access to any space supported by this storage.\n"
            },
            "authorizationHeader": {
              "type": "string",
              "description": "The authorization header to be used for passing the access token. This field can contain any prefix that should be added to the header value. Default is `Authorization: Bearer {}`. The token will placed where `{}` is provided.\n",
              "default": "Authorization: Bearer {}"
            },
            "rangeWriteSupport": {
              "type": "string",
              "description": "The type of partial write support enabled in the WebDAV server. Currently 2 types are supported `sabredav` which assumes the server supports the SabreDAV PartialUpdate extension via `PATCH` method, and `moddav` which assumes server supports partial `PUT` requests with `Content-Range` header. If `none` is selected no write support is available for this WebDAV storage.\n",
              "enum": [
                "none",
                "moddav",
                "sabredav"
              ],
              "default": "none",
              "x-onedata-default-value": "none"
            },
            "connectionPoolSize": {
              "type": "integer",
              "description": "Defines the maximum number of parallel connections for a single WebDAV storage.\n",
              "default": 25,
              "x-onedata-default-value": 25
            },
            "maximumUploadSize": {
              "type": "integer",
              "description": "Defines the maximum upload size for a single `PUT` or `PATCH` request. If set to 0, assumes that the WebDAV server has no upload limit.\n",
              "default": 0,
              "x-onedata-default-value": 0
            },
            "fileMode": {
              "type": "string",
              "description": "Defines the file permissions, which files imported from WebDAV storage will have in Onedata. Values should be provided in octal format e.g. `0644`.\n",
              "default": "0644"
            },
            "dirMode": {
              "type": "string",
              "description": "Defines the directory mode which directories imported from WebDAV storage will have in Onedata. Values should be provided in octal format e.g. `0775`.\n",
              "default": "0775"
            },
            "insecure": {
              "type": "boolean",
              "default": false,
              "description": "Defines whether storage administrator credentials (username and key) may be used by users without storage accounts to access storage in direct IO mode.\n"
            },
            "storagePathType": {
              "type": "string",
              "default": "canonical",
              "x-onedata-default-value": "<<\"canonical\">>",
              "description": "Determines how the logical file paths will be mapped on the storage.\n'canonical' paths reflect the logical file names and directory structure,\nhowever each rename operation will require renaming the files on the storage.\n'flat' paths are based on unique file UUID's and do not require on-storage\nrename when logical file name is changed.\n"
            }
          },
          "required": [
            "type",
            "endpoint"
          ]
        }
      ],
      "example": {
        "type": "webdav",
        "name": "SomeWebDAV",
        "endoint": "https://192.168.1.2:8080/webdav",
        "verifyServerCertificate": false,
        "credentialsType": "oauth2",
        "credentials": "eudat",
        "oauth2IdP": "b2access",
        "rangeWriteSupport": "moddav",
        "connectionPoolSize": 25,
        "maximumUploadSize": 0,
        "insecure": false,
        "readonly": false
      }
    },
    "WebdavModify": {
      "description": "The WebDAV storage configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/StorageDetailsModify"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Type of the modified storage. Must match the type of existing storage, needed only for OpenAPI polymorphism disambiguation.",
              "enum": [
                "webdav"
              ],
              "x-discriminator-value": "webdav"
            },
            "endpoint": {
              "type": "string",
              "description": "Full URL of the WebDAV server, including scheme (http or https) and path.\n"
            },
            "verifyServerCertificate": {
              "type": "boolean",
              "description": "Determines whether Oneprovider should verify the certificate of the WebDAV server.\n"
            },
            "credentialsType": {
              "type": "string",
              "description": "Determines the types of credentials provided in the credentials field.\n",
              "enum": [
                "none",
                "basic",
                "token"
              ]
            },
            "credentials": {
              "type": "string",
              "description": "The credentials to authenticate with the WebDAV server. `basic` credentials should be provided in the form `username:password`, for `token` just the token. For `none` this field is ignored.\n"
            },
            "authorizationHeader": {
              "type": "string",
              "description": "The authorization header to be used for passing the access token. This field can contain any prefix that should be added to the header value. Default is `Authorization: Bearer {}`. The token will placed where `{}` is provided.\n"
            },
            "rangeWriteSupport": {
              "type": "string",
              "description": "The type of partial write support enabled in the WebDAV server. Currently 2 types are supported `sabredav` which assumes the server supports the SabreDAV PartialUpdate extension via `PATCH` method, and `moddav` which assumes server supports partial `PUT` requests with `Content-Range` header. If `none` is selected no write support is available for this WebDAV storage.\n",
              "enum": [
                "none",
                "moddav",
                "sabredav"
              ]
            },
            "connectionPoolSize": {
              "type": "integer",
              "description": "Defines the maximum number of parallel connections for a single WebDAV storage.\n"
            },
            "maximumUploadSize": {
              "type": "integer",
              "description": "Defines the maximum upload size for a single `PUT` or `PATCH` request. If set to 0, assumes that the WebDAV server has no upload limit.\n"
            },
            "insecure": {
              "type": "boolean",
              "description": "Defines whether storage administrator credentials (username and key) may be used by users without storage accounts to access storage in direct IO mode.\n"
            }
          },
          "required": [
            "type"
          ]
        }
      ],
      "example": {
        "type": "webdav",
        "name": "SomeWebDAV",
        "endoint": "https://192.168.1.2:8080/webdav",
        "verifyServerCertificate": false,
        "credentialsType": "basic",
        "credentials": "admin:password",
        "rangeWriteSupport": "moddav",
        "connectionPoolSize": 25,
        "maximumUploadSize": 0,
        "insecure": true
      }
    },
    "StorageCreateRequest": {
      "type": "object",
      "description": "The configuration details required to add storage resources.\n",
      "x-onedata-dictionary": true,
      "x-onedata-dictionary-value-type": "storage_details",
      "additionalProperties": {
        "$ref": "#/definitions/StorageDetails"
      },
      "example": {
        "s3": {
          "type": "s3",
          "s3Hostname": "s3.example.com",
          "iamHostname": "iam.example.com",
          "bucketName": "bucket1.iam.example.com",
          "accessKey": "LKJHLAKJSHD887678678ASDKNJKASD9898789ASD",
          "secretKey": "ASASDLLASD89798&LKJHLAKJSHD887678678ASDK"
        },
        "swift": {
          "type": "swift",
          "authUrl": "http://keystone2.example.com",
          "tenantName": "Project1",
          "containerName": "Container1",
          "username": "user",
          "password": "p@$$w0rd"
        }
      }
    },
    "StorageModifyRequest": {
      "type": "object",
      "description": "The storage parameters to be changed. Should be a single-valued dictionary with storage name as the key and parameters to be changed as the value. If changing the storage name, use old name as dictionary key and provide new name among the changed params.",
      "x-onedata-dictionary": true,
      "x-onedata-dictionary-value-type": "storage_details_modify",
      "additionalProperties": {
        "$ref": "#/definitions/StorageDetailsModify"
      },
      "example": {
        "s3storage": {
          "type": "s3",
          "accessKey": "LKJHLAKJSHD887678678ASDKNJKASD9898789ASD"
        }
      }
    },
    "StorageImportDetails": {
      "type": "object",
      "description": "The storage import configuration. Storage import allows to import data from storage to space without need for copying the data.\n",
      "properties": {
        "strategy": {
          "type": "string",
          "description": "The import strategy. One of no_import, simple_scan."
        },
        "maxDepth": {
          "type": "integer",
          "description": "Maximum depth of filesystem tree that will be traversed during storage synchronization.\n"
        },
        "syncAcl": {
          "type": "boolean",
          "description": "Flag that enables synchronization of NFSv4 ACLs.\n"
        }
      },
      "required": [
        "strategy"
      ]
    },
    "StorageUpdateDetails": {
      "type": "object",
      "description": "The storage update configuration. Storage update ensures that all changes on storage will be reflected in space.\n",
      "properties": {
        "strategy": {
          "type": "string",
          "description": "The update strategy. One of no_update, simple_scan."
        },
        "maxDepth": {
          "type": "integer",
          "description": "Maximum depth of filesystem tree that will be traversed during storage synchronization.\n"
        },
        "scanInterval": {
          "type": "integer",
          "description": "Period between subsequent scans in seconds (counted from end of one scan till beginning of the following).\n"
        },
        "writeOnce": {
          "type": "boolean",
          "description": "Flag determining that synchronized storage will be treated as immutable (only creations and deletions of files on storage will be detected).\n"
        },
        "deleteEnable": {
          "type": "boolean",
          "description": "Flag determining that deletions of files will be detected.\n"
        },
        "syncAcl": {
          "type": "boolean",
          "description": "Flag that enables synchronization of NFSv4 ACLs.\n"
        }
      },
      "required": [
        "strategy"
      ]
    },
    "ZoneConfiguration": {
      "type": "object",
      "description": "The Onezone deployment configuration.",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/ZoneClusterConfiguration"
        },
        "onezone": {
          "type": "object",
          "description": "The Onezone custom configuration.",
          "properties": {
            "domainName": {
              "description": "The domain of Onezone cluster.",
              "type": "string"
            },
            "name": {
              "description": "The Onezone cluster name.",
              "type": "string"
            },
            "letsEncryptEnabled": {
              "type": "boolean",
              "default": false,
              "description": "If enabled the zone will use Let's Encrypt service to obtain SSL certificates. Otherwise certificates must be manually provided.\nBy enabling this option you agree to the Let's Encrypt Subscriber Agreement.\n"
            },
            "builtInDnsServer": {
              "type": "boolean",
              "description": "If true, DNS check will verify that control of DNS zone for Onezone's domain was delegated to the DNS server built into Onezone service.\n"
            },
            "policies": {
              "$ref": "#/definitions/ZonePolicies"
            },
            "users": {
              "type": "array",
              "description": "List of Onezone user specifications.",
              "x-onedata-default-value": "[]",
              "default": [],
              "items": {
                "$ref": "#/definitions/OnezoneUserCreateRequest"
              }
            }
          }
        },
        "onepanel": {
          "$ref": "#/definitions/PanelConfiguration"
        }
      },
      "required": [
        "cluster"
      ],
      "example": {
        "cluster": {
          "domainName": "onezone.onedata.example.com",
          "nodes": {
            "node1": {
              "hostname": "node1"
            }
          },
          "manager": {
            "mainNode": "node1",
            "nodes": [
              "node1"
            ]
          },
          "worker": {
            "nodes": [
              "node1"
            ]
          },
          "database": {
            "nodes": [
              "node1"
            ]
          }
        },
        "onezone": {
          "domainName": "example.com",
          "name": "example",
          "letsEncryptEnabled": true,
          "users": [
            {
              "username": "ozadmin",
              "password": "somepassword",
              "groups": [
                "admins"
              ]
            }
          ]
        }
      }
    },
    "ZoneConfigurationDetails": {
      "type": "object",
      "description": "The zone cluster configuration.",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/ClusterConfigurationDetails"
        },
        "onezone": {
          "type": "object",
          "description": "The zone custom configuration.",
          "properties": {
            "domainName": {
              "description": "Onezone's domain.",
              "type": "string"
            },
            "name": {
              "description": "The name of a zone.",
              "type": "string"
            },
            "configured": {
              "description": "True if all steps of cluster deployment and configuration have been performed.",
              "type": "boolean"
            }
          },
          "required": [
            "domainName",
            "name",
            "configured"
          ]
        }
      },
      "required": [
        "cluster",
        "onezone"
      ],
      "example": {
        "cluster": {
          "master": "node1.onezone.onedata.example.com",
          "manager": {
            "mainHost": "node1.onezone.onedata.example.com",
            "hosts": [
              "node1.onezone.onedata.example.com"
            ]
          },
          "worker": {
            "hosts": [
              "node1.onezone.onedata.example.com"
            ]
          },
          "database": {
            "hosts": [
              "node1.onezone.onedata.example.com"
            ]
          }
        },
        "onezone": {
          "domainName": "example.com",
          "name": "example",
          "configured": true
        }
      }
    },
    "ZoneClusterConfiguration": {
      "type": "object",
      "description": "The zone cluster configuration.",
      "properties": {
        "domainName": {
          "type": "string",
          "default": "",
          "description": "Hostname suffix common for all services in the cluster. Together with a node hostname constitutes a fully qualified domain name (FQDN) of the node. May be skipped to allow unrelated hostnames for each node.\n"
        },
        "nodes": {
          "type": "object",
          "description": "The collection of nodes aliases associated with nodes properties.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "The name of a host."
              },
              "externalIp": {
                "type": "string",
                "description": "External IP of the node."
              }
            },
            "required": [
              "hostname"
            ]
          }
        },
        "databases": {
          "$ref": "#/definitions/ClusterDatabases"
        },
        "managers": {
          "$ref": "#/definitions/ClusterManagers"
        },
        "workers": {
          "$ref": "#/definitions/ClusterWorkers"
        }
      },
      "required": [
        "nodes",
        "databases",
        "managers",
        "workers"
      ]
    },
    "ProviderConfiguration": {
      "type": "object",
      "description": "The provider deployment configuration.",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/ProviderClusterConfiguration"
        },
        "oneprovider": {
          "type": "object",
          "description": "The provider custom configuration.",
          "properties": {
            "register": {
              "type": "boolean",
              "description": "Defines whether the provider should be registered in a zone."
            },
            "token": {
              "type": "string",
              "description": "Registration token obtained from Onezone. This token identifies Onezone to be used and authorizes the registration request.\n"
            },
            "name": {
              "type": "string",
              "description": "The name under which the provider will be registered in a zone."
            },
            "subdomainDelegation": {
              "type": "boolean",
              "description": "If enabled, the storage provider will be assigned a subdomain in onezone's domain and 'subdomain' property must be provided. If disabled, 'domain' property should be provided.\n",
              "default": false
            },
            "subdomain": {
              "type": "string",
              "description": "Unique subdomain in onezone's domain for the provider. Required if subdomain delegation is enabled.\n"
            },
            "letsEncryptEnabled": {
              "type": "boolean",
              "default": false,
              "description": "If enabled the provider will use Let's Encrypt service to obtain SSL certificates. Otherwise certificates must be manually provided. This option cannot be enabled if subdomainDelegation is false. By enabling this option you agree to the Let's Encrypt Subscriber Agreement.\n"
            },
            "domain": {
              "type": "string",
              "description": "The fully qualified domain name of the provider or its IP address (only for single-node deployments or clusters with a reverse proxy). Required if subdomain delegation is disabled.\n"
            },
            "geoLongitude": {
              "type": "number",
              "format": "float",
              "description": "The geographical longitude of the provider."
            },
            "geoLatitude": {
              "type": "number",
              "format": "float",
              "description": "The geographical latitude of the provider."
            },
            "adminEmail": {
              "type": "string",
              "description": "Email address of the oneprovider administrator."
            }
          },
          "required": [
            "register",
            "name",
            "adminEmail"
          ]
        },
        "onepanel": {
          "$ref": "#/definitions/PanelConfiguration"
        }
      },
      "required": [
        "cluster"
      ],
      "example": {
        "cluster": {
          "domainName": "oneprovider.onedata.example.com",
          "nodes": {
            "node1": {
              "hostname": "node1"
            }
          },
          "manager": {
            "mainNode": "node1",
            "nodes": [
              "node1"
            ]
          },
          "worker": {
            "nodes": [
              "node1"
            ]
          },
          "database": {
            "nodes": [
              "node1"
            ]
          },
          "storage": {
            "NFS": {
              "type": "posix",
              "mountPoint": "/volumes/storage"
            }
          }
        },
        "oneprovider": {
          "register": true,
          "token": "bWFjYXJvb25mcm9tb25lem9uZQo=",
          "name": "example",
          "subdomainDelegation": "false,",
          "letsEncryptEnabled": "false,",
          "domain": "provider.example.com",
          "adminEmail": "admin@example.eu",
          "geoLongitude": -24.3776025,
          "geoLatitude": -128.3519364
        }
      }
    },
    "ProviderConfigurationDetails": {
      "type": "object",
      "description": "The provider deployment configuration.",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/ClusterConfigurationDetails"
        },
        "oneprovider": {
          "type": "object",
          "description": "The provider custom configuration.",
          "properties": {
            "name": {
              "description": "The name of a provider. `null` if not registered.",
              "type": "string"
            },
            "configured": {
              "description": "True if all steps of cluster deployment and configuration have been performed.",
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "configured"
          ]
        }
      },
      "required": [
        "cluster",
        "oneprovider"
      ],
      "example": {
        "cluster": {
          "master": "node1.oneprovider.onedata.example.com",
          "manager": {
            "mainHost": "node1.oneprovider.onedata.example.com",
            "hosts": [
              "node1.oneprovider.onedata.example.com"
            ]
          },
          "worker": {
            "hosts": [
              "node1.oneprovider.onedata.example.com"
            ]
          },
          "database": {
            "hosts": [
              "node1.oneprovider.onedata.example.com"
            ]
          }
        },
        "oneprovider": {
          "name": "example",
          "configured": true
        }
      }
    },
    "ProviderClusterConfiguration": {
      "type": "object",
      "description": "The provider cluster configuration.",
      "properties": {
        "domainName": {
          "type": "string",
          "default": "",
          "description": "Hostname suffix common for all services in the cluster. Together with a node hostname constitutes a fully qualified domain name (FQDN) of the node. May be skipped to allow unrelated hostnames for each node.\n"
        },
        "nodes": {
          "type": "object",
          "description": "The collection of nodes aliases associated with nodes properties.",
          "additionalProperties": {
            "type": "object",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "The name of a host."
              },
              "externalIp": {
                "type": "string",
                "description": "External IP of the node."
              }
            },
            "required": [
              "hostname"
            ]
          }
        },
        "databases": {
          "$ref": "#/definitions/ClusterDatabases"
        },
        "managers": {
          "$ref": "#/definitions/ClusterManagers"
        },
        "workers": {
          "$ref": "#/definitions/ClusterWorkers"
        },
        "storages": {
          "$ref": "#/definitions/StorageCreateRequest"
        }
      },
      "required": [
        "nodes",
        "databases",
        "managers",
        "workers"
      ]
    },
    "ProviderDetails": {
      "type": "object",
      "description": "The Oneprovider configuration details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Id assigned by a zone."
        },
        "name": {
          "type": "string",
          "description": "The name under which the Oneprovider has been registered in a zone."
        },
        "subdomainDelegation": {
          "type": "boolean",
          "description": "If enabled, the storage Oneprovider has a subdomain in onezone's domain and 'subdomain' property must be provided.\n"
        },
        "subdomain": {
          "type": "string",
          "description": "Unique subdomain in onezone's domain for the Oneprovider. Required if subdomain delegation is enabled.\n"
        },
        "domain": {
          "type": "string",
          "description": "The fully qualified domain name of the Oneprovider or its IP address (only for single-node deployments or clusters with a reverse proxy).\n"
        },
        "adminEmail": {
          "type": "string",
          "description": "Email address of the Oneprovider administrator. Omitted if it could not be retrievied."
        },
        "geoLongitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical longitude of the Oneprovider."
        },
        "geoLatitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical latitude of the Oneprovider."
        },
        "onezoneDomainName": {
          "type": "string",
          "description": "The domain name of a zone where this storage Oneprovider is registered."
        }
      },
      "required": [
        "id",
        "name",
        "subdomainDelegation",
        "domain",
        "geoLongitude",
        "geoLatitude",
        "onezoneDomainName"
      ],
      "example": {
        "id": "VAiDGZbs3k0FD8jPhyU1",
        "name": "Provider1",
        "subdomainDelegation": false,
        "domain": "provider.example.com",
        "geoLongitude": -24.3776025,
        "geoLatitude": -128.3519364,
        "onezoneDomainName": "onezone2.example.com"
      }
    },
    "ProviderSpaces": {
      "type": "object",
      "description": "The provider spaces details.",
      "properties": {
        "ids": {
          "type": "array",
          "description": "The list of IDs of spaces supported by a provider.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "ids"
      ],
      "example": {
        "ids": [
          "x7It3cpgNgLZ8RwOrOoW",
          "Q1boCClpCS5mUNhM7YCy"
        ]
      }
    },
    "ProviderStorages": {
      "type": "object",
      "description": "The cluster storage resources.",
      "properties": {
        "ids": {
          "type": "array",
          "description": "The list of Ids of cluster storage resources.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "ids"
      ],
      "example": {
        "ids": [
          "x7It3cpgNgLZ8RwOrOoW",
          "Q1boCClpCS5mUNhM7YCy"
        ]
      }
    },
    "ProviderRegisterRequest": {
      "type": "object",
      "description": "The storage provider configuration details required for registration process.\n",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name under which the provider should be registered in a zone.\n"
        },
        "token": {
          "type": "string",
          "description": "Registration token obtained from Onezone. This token identifies Onezone to be used and authorizes the registration request.\n"
        },
        "subdomainDelegation": {
          "type": "boolean",
          "description": "If enabled, the storage provider will be assigned a subdomain in onezone's domain and 'subdomain' property must be provided. If disabled, 'domain' property should be provided.\n",
          "default": false
        },
        "subdomain": {
          "type": "string",
          "description": "Unique subdomain in onezone's domain for the storage provider. Required if subdomain delegation is enabled.\n"
        },
        "domain": {
          "type": "string",
          "description": "The fully qualified domain name of the storage provider or its IP address (only for single-node deployments or clusters with a reverse proxy). Required if subdomain delegation is disabled.\n"
        },
        "geoLongitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical longitude of the storage provider.\n"
        },
        "geoLatitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical latitude of the storage provider.\n"
        },
        "adminEmail": {
          "type": "string",
          "description": "Email address of the Oneprovider administrator."
        }
      },
      "required": [
        "name",
        "token",
        "subdomainDelegation",
        "adminEmail"
      ],
      "example": {
        "name": "Provider1",
        "token": "bWFjYXJvb25mcm9tb25lem9uZQo=",
        "subdomainDelegation": false,
        "domain": "provider.example.com",
        "geoLongitude": -24.3776025,
        "geoLatitude": -128.3519364
      }
    },
    "ProviderModifyRequest": {
      "type": "object",
      "description": "The provider configuration details that can be modified.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name under which the provider has been registered in a zone."
        },
        "subdomainDelegation": {
          "type": "boolean",
          "description": "If enabled, the storage provider will be assigned a subdomain in onezone's domain and 'subdomain' property must be provided. If disabled, 'domain' property should be provided.\n"
        },
        "subdomain": {
          "type": "string",
          "description": "Unique subdomain in onezone's domain for the provider. This property is required only if subdomain delegation is enabled. Otherwise it is ignored.\n"
        },
        "domain": {
          "type": "string",
          "description": "The fully qualified domain name of the provider or its IP address (only for single-node deployments or clusters with a reverse proxy). This property is required only if subdomain delegation is disabled. Otherwise it is ignored.\n"
        },
        "geoLongitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical longitude of the provider."
        },
        "geoLatitude": {
          "type": "number",
          "format": "float",
          "description": "The geographical latitude of the provider."
        },
        "adminEmail": {
          "type": "string",
          "description": "Email address of the oneprovider administrator."
        }
      },
      "example": {
        "name": "Provider1",
        "subdomainDelegation": false,
        "domain": "provider.example.com",
        "geoLongitude": -24.3776025,
        "geoLatitude": -128.3519364
      }
    },
    "Progress": {
      "type": "object",
      "description": "Progress markers indicating which steps of interactive deployment were reached by the admin performing cluster setup.",
      "properties": {
        "clusterNodes": {
          "type": "boolean",
          "readOnly": true,
          "description": "True after user assigned services to cluster nodes and they were deployed."
        },
        "clusterIps": {
          "type": "boolean",
          "description": "True after user provided public IPs of cluster nodes or confirmed autodetected defaults. Also true if interactiveDeployment was disabled."
        },
        "webCertificate": {
          "type": "boolean",
          "description": "True after user decided whether to use Let's Encrypt certificates or if interactiveDeployment was disabled."
        },
        "dnsCheck": {
          "type": "boolean",
          "description": "True after user reviewed results of DNS check or if interactiveDeployment was disabled."
        },
        "storageSetup": {
          "type": "boolean",
          "readOnly": true,
          "description": "True after at least one storage was added to op_worker. Omitted in Onezone panel."
        },
        "isRegistered": {
          "type": "boolean",
          "readOnly": true,
          "description": "True if the Oneprovider is registered at Onezone. Omitted in Onezone panel."
        }
      }
    },
    "ProgressModify": {
      "type": "object",
      "description": "Progress markers which can be set or unset by the GUI.",
      "properties": {
        "clusterIps": {
          "type": "boolean",
          "description": "True after user confirmed detected external IPs or if interactiveDeployment was disabled."
        },
        "webCertificate": {
          "type": "boolean",
          "description": "True after user decided whether to use Let's Encrypt certificates or if interactiveDeployment was disabled."
        },
        "dnsCheck": {
          "type": "boolean",
          "description": "True after user reviewed results of DNS check or if interactiveDeployment was disabled."
        }
      }
    },
    "ServiceStatus": {
      "type": "object",
      "description": "The generic model for service status.",
      "properties": {
        "hosts": {
          "type": "object",
          "description": "The collection of hosts with associated service status, for each host\nwhere given service has been deployed.\n",
          "additionalProperties": {
            "$ref": "#/definitions/ServiceStatusHost"
          }
        }
      },
      "required": [
        "hosts"
      ]
    },
    "ServiceStatusHost": {
      "type": "object",
      "description": "The service status.",
      "properties": {
        "status": {
          "type": "string",
          "description": "The service status.",
          "enum": [
            "healthy",
            "unhealthy",
            "stopped",
            "missing"
          ]
        }
      },
      "required": [
        "status"
      ]
    },
    "ServiceError": {
      "type": "object",
      "description": "The service error model for REST requests.",
      "properties": {
        "error": {
          "description": "The name of an error type.",
          "type": "string"
        },
        "description": {
          "description": "The detailed error description.",
          "type": "string"
        },
        "module": {
          "description": "The name of a module containing function that returned error.",
          "type": "string"
        },
        "function": {
          "description": "The name of a function that returned error.",
          "type": "string"
        },
        "hosts": {
          "type": "object",
          "description": "The collection of hosts with associated error description.",
          "additionalProperties": {
            "$ref": "#/definitions/Error"
          }
        }
      },
      "required": [
        "error",
        "description"
      ]
    },
    "ServiceHosts": {
      "type": "object",
      "description": "The service hosts configuration.",
      "properties": {
        "hosts": {
          "type": "array",
          "description": "The list of hosts where service should be deployed.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "hosts"
      ],
      "example": {
        "hosts": [
          "node1.example.com",
          "node2.example.com",
          "node3.example.com"
        ]
      }
    },
    "ServiceDatabases": {
      "type": "object",
      "description": "The service hosts configuration.",
      "properties": {
        "hosts": {
          "type": "array",
          "description": "The list of hosts where service should be deployed.",
          "items": {
            "type": "string"
          }
        },
        "serverQuota": {
          "type": "integer",
          "description": "The server quota is the RAM memory in bytes that is allocated to the server when Couchbase Server is first installed. This sets the limit of RAM allocated by Couchbase for caching data for all buckets and is configured on a per-node basis.\n"
        },
        "bucketQuota": {
          "type": "integer",
          "description": "The bucket quota is the amount of RAM memory in bytes allocated to an individual bucket for caching data.\n"
        }
      },
      "required": [
        "hosts"
      ],
      "example": {
        "hosts": [
          "node1.example.com",
          "node2.example.com",
          "node3.example.com"
        ]
      }
    },
    "DatabaseHosts": {
      "type": "object",
      "description": "The cluster database service hosts configuration.",
      "properties": {
        "hosts": {
          "type": "array",
          "description": "The list of service hosts.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "hosts"
      ],
      "example": {
        "hosts": [
          "node1.example.com",
          "node2.example.com",
          "node3.example.com"
        ]
      }
    },
    "ManagerHosts": {
      "type": "object",
      "description": "The cluster manager service hosts configuration.",
      "properties": {
        "mainHost": {
          "type": "string",
          "description": "The main cluster manager host. Main cluster manager node is responsible for monitoring cluster worker nodes. Other nodes, which are redundant, are suspended. In case of main cluster manager node failure one of redundant nodes is resumed and takes over main node responsibilities.\n"
        },
        "hosts": {
          "type": "array",
          "description": "The list of service hosts.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "mainHost",
        "hosts"
      ],
      "example": {
        "mainHost": "node1.example.com",
        "hosts": [
          "node1.example.com",
          "node2.example.com",
          "node3.example.com"
        ]
      }
    },
    "WorkerHosts": {
      "type": "object",
      "description": "The cluster worker service hosts configuration.",
      "properties": {
        "hosts": {
          "type": "array",
          "description": "The list of service hosts.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "hosts"
      ],
      "example": {
        "hosts": [
          "node1.example.com",
          "node2.example.com",
          "node3.example.com"
        ]
      }
    },
    "Node": {
      "type": "object",
      "description": "Details of a onepanel node.",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "Hostname of the node."
        },
        "clusterType": {
          "type": "string",
          "description": "Type of Onedata cluster managed by this onepanel.",
          "enum": [
            "oneprovider",
            "onezone"
          ]
        }
      },
      "required": [
        "hostname",
        "clusterType"
      ]
    },
    "ClusterConfigurationDetails": {
      "type": "object",
      "description": "The cluster configuration.",
      "properties": {
        "master": {
          "type": "string",
          "description": "Host responsible for deploying cluster and coordinating cluster restarts."
        },
        "databases": {
          "$ref": "#/definitions/DatabaseHosts"
        },
        "managers": {
          "$ref": "#/definitions/ManagerHosts"
        },
        "workers": {
          "$ref": "#/definitions/WorkerHosts"
        }
      },
      "required": [
        "master",
        "databases",
        "managers",
        "workers"
      ]
    },
    "TaskStatus": {
      "type": "object",
      "description": "The result of a scheduled operation, e.g. database service configuration.\n",
      "properties": {
        "status": {
          "type": "string",
          "description": "The operation status.",
          "enum": [
            "ok",
            "error",
            "running"
          ]
        },
        "steps": {
          "type": "array",
          "description": "The list of operation steps that have been executed successfully.",
          "items": {
            "type": "string"
          }
        },
        "error": {
          "description": "The name of an error type.",
          "type": "string"
        },
        "description": {
          "description": "The detailed error description.",
          "type": "string"
        },
        "module": {
          "description": "The name of a module containing function that returned error.",
          "type": "string"
        },
        "function": {
          "description": "The name of a function that returned error.",
          "type": "string"
        },
        "hosts": {
          "type": "object",
          "description": "The collection of hosts with associated error description.",
          "additionalProperties": {
            "$ref": "#/definitions/Error"
          }
        }
      },
      "required": [
        "status",
        "steps"
      ],
      "example": {
        "status": "running",
        "steps": [
          "configuring"
        ]
      }
    },
    "SpaceDetails": {
      "type": "object",
      "description": "The space details.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Id of the space."
        },
        "name": {
          "type": "string",
          "description": "The name of the space."
        },
        "storageId": {
          "type": "string",
          "description": "Id of StorageDetails that supports this space on provider that is associated with this panel.\n"
        },
        "localStorages": {
          "type": "array",
          "description": "The list of IDs of cluster storage resources.",
          "items": {
            "type": "string"
          }
        },
        "supportingProviders": {
          "type": "object",
          "description": "The collection of provider IDs with associated supported storage space in bytes.\n",
          "additionalProperties": {
            "type": "integer",
            "description": "Supported storage space in bytes."
          }
        },
        "mountInRoot": {
          "type": "boolean",
          "default": false,
          "description": "Defines whether space will be mounted in / or /{SpaceId}/ path.\n"
        },
        "storageImport": {
          "$ref": "#/definitions/StorageImportDetails"
        },
        "storageUpdate": {
          "$ref": "#/definitions/StorageUpdateDetails"
        },
        "spaceOccupancy": {
          "type": "integer",
          "description": "Amount of storage [b] used by data from given space on that storage."
        }
      },
      "required": [
        "id",
        "name",
        "storageId",
        "localStorages",
        "supportingProviders",
        "spaceOccupancy"
      ]
    },
    "SpaceSupportRequest": {
      "type": "object",
      "description": "The configuration details required to create or support a space by a provider.\n",
      "properties": {
        "token": {
          "type": "string",
          "description": "The token for space creation or support."
        },
        "size": {
          "type": "integer",
          "description": "The storage space size in bytes that provider is willing to assign to the space.\n"
        },
        "storageId": {
          "type": "string",
          "description": "The Id of the storage resource where the space data should be stored.\n"
        },
        "mountInRoot": {
          "type": "boolean",
          "default": false,
          "description": "Defines whether space will be mounted in / or /{SpaceId}/ path.\n"
        },
        "storageImport": {
          "$ref": "#/definitions/StorageImportDetails"
        },
        "storageUpdate": {
          "$ref": "#/definitions/StorageUpdateDetails"
        }
      },
      "required": [
        "token",
        "size",
        "storageId"
      ],
      "example": {
        "token": "ASDJNASD87687ASDMNBMNASD87786asd",
        "size": 1024000,
        "storageId": "x7It3cpgNgLZ8RwOrOoW"
      }
    },
    "SpaceModifyRequest": {
      "type": "object",
      "description": "The space configuration details that can be modified.",
      "properties": {
        "size": {
          "type": "integer",
          "description": "The storage space size in bytes that provider is willing to assign to the space.\n"
        },
        "storageImport": {
          "$ref": "#/definitions/StorageImportDetails"
        },
        "storageUpdate": {
          "$ref": "#/definitions/StorageUpdateDetails"
        }
      }
    },
    "SpaceSyncStats": {
      "type": "object",
      "description": "Status and statistics of storage/space synchronization.",
      "properties": {
        "importStatus": {
          "type": "string",
          "description": "Describes import algorithm run status.",
          "enum": [
            "inProgress",
            "done"
          ]
        },
        "updateStatus": {
          "type": "string",
          "enum": [
            "waiting",
            "inProgress"
          ],
          "description": "Describes update algorithm run status."
        },
        "stats": {
          "description": "Collection of statistics for requested metrics.",
          "$ref": "#/definitions/TimeStatsCollection"
        }
      },
      "required": [
        "importStatus"
      ],
      "example": {
        "importStatus": "done",
        "updateStatus": "inProgress",
        "stats": {
          "queueLength": {
            "name": "queueLength",
            "lastValueDate": "2017-06-22T13:29:39.654Z",
            "period": "hour",
            "values": [
              4,
              8,
              12,
              16,
              20,
              10,
              4,
              2,
              0,
              0,
              0,
              0
            ]
          },
          "insertCount": {
            "name": "insertCount",
            "lastValueDate": "2017-06-22T13:29:39.654Z",
            "period": "hour",
            "values": [
              4,
              8,
              12,
              16,
              20,
              10,
              4,
              2,
              0,
              0,
              0,
              0
            ]
          }
        }
      }
    },
    "TimeStats": {
      "type": "object",
      "description": "Statistics for single metric over specified time.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of metric for which this object holds statistics.",
          "enum": [
            "queueLength",
            "insertCount",
            "updateCount",
            "deleteCount"
          ]
        },
        "lastValueDate": {
          "type": "string",
          "description": "Date of last measurement value in this object in ISO 8601 format"
        },
        "period": {
          "description": "Predefined time period for which the statistics were fetched",
          "type": "string",
          "enum": [
            "minute",
            "hour",
            "day"
          ]
        },
        "values": {
          "type": "array",
          "description": "List of sample values for given metric. The used period is divided into array-length number of parts. E.g. if the used period is an hour, and if there are 12 values in this array, every value is a value for 1/12 of day, which gives value for every hour of the day. If the value is null, there is no sample for given time part.\n",
          "items": {
            "type": "number"
          }
        }
      },
      "required": [
        "name",
        "lastValueDate",
        "values"
      ],
      "example": {
        "name": "queueLength",
        "lastValueDate": "2017-06-22T13:29:39.654Z",
        "period": "minute",
        "values": [
          4,
          8,
          12,
          16,
          20,
          10,
          4,
          2,
          0,
          0,
          0,
          0
        ]
      }
    },
    "TimeStatsCollection": {
      "type": "object",
      "description": "Statistics for single metric over specified time.",
      "properties": {
        "queueLength": {
          "description": "Statistics of storage sync jobs queue length.",
          "$ref": "#/definitions/TimeStats"
        },
        "insertCount": {
          "description": "Statistics of storage sync imported files.",
          "$ref": "#/definitions/TimeStats"
        },
        "updateCount": {
          "description": "Statistics of storage sync updated files.",
          "$ref": "#/definitions/TimeStats"
        },
        "deleteCount": {
          "description": "Statistics of storage sync deleted files.",
          "$ref": "#/definitions/TimeStats"
        }
      }
    },
    "TransfersMock": {
      "type": "object",
      "description": "State of transfers mock.",
      "properties": {
        "transfersMock": {
          "type": "boolean",
          "description": "If true, transfers are marked as successful without actually transmiting any data."
        }
      },
      "example": {
        "transfersMock": true
      }
    },
    "SpaceFilePopularityConfiguration": {
      "type": "object",
      "description": "Configuration of the file-popularity mechanism in the space.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "If true, collecting file-popularity mechanism in the space is enabled"
        },
        "exampleQuery": {
          "type": "string",
          "description": "Example `curl` command that can be executed to query the file-popularity view in the space.\n"
        },
        "lastOpenHourWeight": {
          "type": "number",
          "format": "float",
          "description": "Weight of `lastOpenHour` parameter.\n",
          "default": 1
        },
        "avgOpenCountPerDayWeight": {
          "type": "number",
          "format": "float",
          "description": "Weight of `avgOpenCountPerDayWeight` parameter.\n",
          "default": 20
        },
        "maxAvgOpenCountPerDay": {
          "type": "number",
          "format": "float",
          "description": "Maximal value of average open count per day taken to calculate the value of popularity function.\n",
          "default": 100
        }
      },
      "example": {
        "enabled": true,
        "exampleQuery": "curl -sS -k -H 'X-Auth-Token: $TOKEN' -X GET https://$HOST/api/v3/oneprovider/spaces/example_space_id/views/file-popularity?limit=10&stale=false",
        "lastOpenHourWeight": 1,
        "avgOpenCountPerDayWeight": 20,
        "maxAvgOpenCountPerDay": 100
      }
    },
    "SpaceAutoCleaningConfiguration": {
      "type": "object",
      "description": "Settings for space auto-cleaning mechanism. Setting enabled to `false` disables given parameter. It will be ignored by auto-cleaning mechanism. All presented parameters' ranges are inclusive.\n",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "If true, auto-cleaning mechanism is enabled in the space."
        },
        "threshold": {
          "type": "integer",
          "description": "Amount of data [b], which should trigger the auto-cleaning in the space. Only replicas maintained by this storage provider will be removed.  This parameter is required to enable auto-cleaning.\n"
        },
        "target": {
          "type": "integer",
          "description": "Amount of data [b], at which the auto-cleaning process should stop. This parameter is required to enable auto-cleaning.\n"
        },
        "rules": {
          "description": "Rules used to select certain list of file replicas that can be evicted by auto-cleaning mechanism.\n",
          "$ref": "#/definitions/SpaceAutoCleaningRules"
        }
      },
      "example": {
        "enabled": true,
        "target": 1073741824,
        "threshold": 1099511627776,
        "rules": {
          "enabled": true,
          "maxOpenCount": {
            "enabled": true,
            "value": 1000
          },
          "minHoursSinceLastOpen": {
            "enabled": true,
            "value": 10
          },
          "minFileSize": {
            "enabled": true,
            "value": 1
          },
          "maxFileSize": {
            "enabled": true,
            "value": 1024
          },
          "maxHourlyMovingAverage": {
            "enabled": true,
            "value": 10
          },
          "maxDailyMovingAverage": {
            "enabled": false,
            "value": 100
          },
          "maxMonthlyMovingAverage": {
            "enabled": false
          }
        }
      }
    },
    "SpaceAutoCleaningRules": {
      "type": "object",
      "description": "Rules used to select certain list of file replicas that can be evicted by auto-cleaning mechanism. A rule is enabled by setting its `enabled` field to `true`. By default all rules are disabled (ignored). A rule can be enabled without specifying its value. In that case previous value is used. If the rule is enabled for the first time a default value will be used. All rules' values are inclusive.\n",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Informs whether selective rules should be used by auto-cleaning mechanism.\n"
        },
        "maxOpenCount": {
          "$ref": "#/definitions/SpaceAutoCleaningRuleSetting",
          "description": "Files that have been opened less than `maxOpenCount` times may be cleaned. The default value is `9007199254740991 (2^53-1)`.\n"
        },
        "minHoursSinceLastOpen": {
          "$ref": "#/definitions/SpaceAutoCleaningRuleSetting",
          "description": "Files that haven't been opened for longer than or equal to given period [h] may be cleaned. The default value is `0`.\n"
        },
        "minFileSize": {
          "$ref": "#/definitions/SpaceAutoCleaningRuleSetting",
          "description": "Only files which size [b] is greater than given value may be cleaned. The default value is `1`.\n"
        },
        "maxFileSize": {
          "$ref": "#/definitions/SpaceAutoCleaningRuleSetting",
          "description": "Only files which size [b] is less than given value may be cleaned. The default value is `1125899906842624 (1 PiB)`.\n"
        },
        "maxHourlyMovingAverage": {
          "$ref": "#/definitions/SpaceAutoCleaningRuleSetting",
          "description": "Files that have moving average of open operations count per hour less than given value may be cleaned. The average is calculated in 24 hours window. The default value is `9007199254740991 (2^53-1)`.\n"
        },
        "maxDailyMovingAverage": {
          "$ref": "#/definitions/SpaceAutoCleaningRuleSetting",
          "description": "Files that have moving average of open operations count per day less than given value may be cleaned. The average is calculated in 30 days window. The default value is `9007199254740991 (2^53-1)`.\n"
        },
        "maxMonthlyMovingAverage": {
          "$ref": "#/definitions/SpaceAutoCleaningRuleSetting",
          "description": "Files that have moving average of open operations count per month less than given value may be cleaned. The average is calculated in 12 months window. The default value is `9007199254740991 (2^53-1)`."
        }
      }
    },
    "SpaceAutoCleaningRuleSetting": {
      "type": "object",
      "description": "Rule setting for a space auto-cleaning mechanism. Setting field `enabled` to `false` disables the rule.\n",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Informs whether given setting is enabled.\n"
        },
        "value": {
          "type": "integer",
          "description": "Integer value of a given setting."
        }
      },
      "example": {
        "enabled": true,
        "value": 1024
      }
    },
    "SpaceAutoCleaningStatus": {
      "type": "object",
      "description": "Status of current auto-cleaning process for given space",
      "properties": {
        "inProgress": {
          "type": "boolean",
          "description": "Flag which indicates whether auto-cleaning process is currently in progress\n"
        },
        "spaceOccupancy": {
          "type": "integer",
          "description": "Amount of storage [b] used by data from given space on that storage."
        }
      },
      "required": [
        "inProgress",
        "spaceOccupancy"
      ],
      "example": {
        "inProgress": true,
        "spaceOccupancy": 100200
      }
    },
    "SpaceAutoCleaningReports": {
      "type": "object",
      "description": "The space auto-cleaning reports.",
      "properties": {
        "ids": {
          "type": "array",
          "description": "The list of Ids of space auto-cleaning reports.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "ids"
      ],
      "example": {
        "ids": [
          "x7It3cpgNgLZ8RwOrOoW",
          "Q1boCClpCS5mUNhM7YCy"
        ]
      }
    },
    "SpaceAutoCleaningReport": {
      "type": "object",
      "description": "Report from an auto-cleaning run.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of an auto-cleaning report."
        },
        "index": {
          "type": "string",
          "description": "Index of an auto-cleaning report. It can be used to list report Ids starting from given report.\n"
        },
        "startedAt": {
          "type": "string",
          "description": "Start time of an auto-cleaning run in ISO 8601 format"
        },
        "stoppedAt": {
          "type": "string",
          "description": "Finish time of an auto-cleaning run in ISO 8601 format"
        },
        "releasedBytes": {
          "type": "integer",
          "description": "Number of bytes deleted during an auto-cleaning run."
        },
        "bytesToRelease": {
          "type": "integer",
          "description": "Number of bytes that should be deleted."
        },
        "filesNumber": {
          "type": "integer",
          "description": "Number of deleted files."
        }
      },
      "required": [
        "id",
        "index",
        "startedAt",
        "stoppedAt",
        "releasedBytes",
        "bytesToRelease",
        "filesNumber"
      ],
      "example": {
        "id": "asdfhLfgPDGSDFASDHgI",
        "index": "1290736458asdfhL",
        "startedAt": "2017-06-22T13:29:39.654Z",
        "stoppedAt": "2017-06-22T15:57:41.958Z",
        "releasedBytes": 60000,
        "bytesToRelease": 500,
        "filesNumber": 10
      }
    },
    "SpaceId": {
      "type": "object",
      "description": "Provides Id of a space.",
      "properties": {
        "id": {
          "type": "string",
          "description": "The Id of the space."
        }
      },
      "required": [
        "id"
      ]
    },
    "WebCert": {
      "type": "object",
      "description": "The SSL certificate details.",
      "properties": {
        "letsEncrypt": {
          "type": "boolean",
          "description": "If true, the certificate is obtained from Let's Encrypt service and renewed automatically. Otherwise, the certificate management is up to the administrator.\n"
        },
        "expirationTime": {
          "type": "string",
          "description": "Installed certificate's expiration time in ISO 8601 format.\n"
        },
        "creationTime": {
          "type": "string",
          "description": "Installed certificate's creation time in ISO 8601 format.\n"
        },
        "status": {
          "type": "string",
          "description": "Describes certificate validity status.",
          "enum": [
            "valid",
            "near_expiration",
            "expired",
            "domain_mismatch",
            "regenerating",
            "unknown"
          ]
        },
        "paths": {
          "type": "object",
          "description": "Paths to certificate-related files.",
          "properties": {
            "cert": {
              "type": "string",
              "description": "Path to the certificate PEM file."
            },
            "key": {
              "type": "string",
              "description": "Path to the corresponding private key PEM file."
            },
            "chain": {
              "type": "string",
              "description": "Path to the file containing certificate chain."
            }
          },
          "required": [
            "cert",
            "key",
            "chain"
          ]
        },
        "domain": {
          "type": "string",
          "description": "The domain (Common Name) for which current certificate was issued.\n"
        },
        "issuer": {
          "type": "string",
          "description": "Issuer value of the current certificate.\n"
        },
        "lastRenewalSuccess": {
          "type": "string",
          "description": "Date and time in ISO 8601 format. Represents last successful Let's Encrypt certification. If there are no successful attempts its value is null. This property is omitted if letsEncrypt is off.\n"
        },
        "lastRenewalFailure": {
          "type": "string",
          "description": "Date and time in ISO 8601 format. Represents last unsuccessful Let's Encrypt certification. If there are no successful attempts its value is null. This property is omitted if letsEncrypt is off.\n"
        }
      },
      "required": [
        "letsEncrypt",
        "expirationTime",
        "creationTime",
        "paths",
        "domain",
        "issuer",
        "status"
      ],
      "example": {
        "paths": {
          "cert": "/etc/oz_panel/certs/web_cert.pem",
          "key": "/etc/oz_panel/certs/web_key.pem",
          "chain": "/etc/oz_panel/certs/web_chain.pem"
        },
        "obtainedTime": "2018-07-11T13:11:05Z",
        "letsEncrypt": true,
        "issuer": "LE Intermediate X3",
        "expirationTime": "2018-10-09T13:11:05Z",
        "domain": "onedata.org"
      }
    },
    "WebCertModifyRequest": {
      "type": "object",
      "description": "The SSL certificate configuration details that can be modified.",
      "properties": {
        "letsEncrypt": {
          "type": "boolean",
          "description": "If enabled Let's Encrypt service will be used to obtain SSL certificates and renew them before expiration. Otherwise certificates must be manually provided.\n"
        }
      },
      "required": [
        "letsEncrypt"
      ],
      "example": {
        "letsEncrypt": true
      }
    },
    "ZonePolicies": {
      "type": "object",
      "description": "State of Onezone operation policies.",
      "properties": {
        "oneproviderRegistration": {
          "type": "string",
          "enum": [
            "open",
            "restricted"
          ],
          "description": "Indicates policy enforced during provider registration. Possible options are:\nopen - anyone can acquire a registration token and register a new Oneprovider\nrestricted - requires an administrative privilege 'oz_providers_invite'\n             to generate a Oneprovider registration token. The token\n             can be issued for someone else.\n"
        },
        "subdomainDelegation": {
          "type": "boolean",
          "description": "If true, Oneproviders are allowed to request subdomains of the Onezone domain for use as their domains."
        },
        "guiPackageVerification": {
          "type": "boolean",
          "default": true,
          "description": "When this value is true, GUI packages uploaded by services operating under Onezone or by harvester admins are checked against known SHA-256 check-sums using the compatibility registry. Setting this value to false disables the verification.\nWARNING: disabling GUI package verification poses a severe security threat, allowing Oneprovider owners to upload arbitrary GUI to Onezone (which is then hosted in Onezone's domain).\n"
        },
        "harvesterGuiPackageVerification": {
          "type": "boolean",
          "default": true,
          "description": "This policy can be used to disable GUI package verification for harvester plugins only. See \"guiPackageVerification\" for detailed description.\nThis setting has no effect if \"guiPackageVerification\" is set to false.\n"
        }
      },
      "example": {
        "subdomainDelegation": true,
        "guiPackageVerification": true,
        "harvesterGuiPackageVerification": false
      }
    }
  },
  "tags": [
    {
      "name": "Onepanel",
      "description": "Common Onepanel resources and operations"
    },
    {
      "name": "Oneprovider",
      "description": "Resources and operations for managing Oneprovider deployment"
    },
    {
      "name": "Onezone",
      "description": "Resources and operations for managing Onezone deployment"
    }
  ],
  "securityDefinitions": {
    "basic": {
      "type": "basic"
    },
    "api_key1": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    },
    "api_key2": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "basic": []
    },
    {
      "api_key1": []
    },
    {
      "api_key2": []
    }
  ]
}
